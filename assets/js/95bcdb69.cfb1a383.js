(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[1523],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return y}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),y=r,d=p["".concat(i,".").concat(y)]||p[y]||u[y]||s;return n?a.createElement(d,o(o({ref:t},m),{},{components:n})):a.createElement(d,o({ref:t},m))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,o=new Array(s);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var c=2;c<s;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1332:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},5386:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7294),r=n(8578);var s=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(6010),l="tabItem_2kG2",i="tabItemActive_3NDg";var c=37,m=39;var u=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,u=e.values,p=e.groupId,y=e.className,d=s(),f=d.tabGroupChoices,g=d.setTabGroupChoices,v=(0,a.useState)(r),T=v[0],k=v[1],b=a.Children.toArray(e.children),h=[];if(null!=p){var x=f[p];null!=x&&x!==T&&u.some((function(e){return e.value===x}))&&k(x)}var S=function(e){var t=e.currentTarget,n=h.indexOf(t),a=u[n].value;k(a),null!=p&&(g(p,a),setTimeout((function(){var e,n,a,r,s,o,l,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,s=e.right,o=window,l=o.innerHeight,c=o.innerWidth,n>=0&&s<=c&&r<=l&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},L=function(e){var t,n;switch(e.keyCode){case m:var a=h.indexOf(e.target)+1;n=h[a]||h[0];break;case c:var r=h.indexOf(e.target)-1;n=h[r]||h[h.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},y)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":T===t}),key:t,ref:function(e){return h.push(e)},onKeyDown:L,onFocus:S,onClick:S},n)}))),t?(0,a.cloneElement)(b.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},b.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}},8578:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1989:function(e,t,n){"use strict";var a=n(7294),r=n(2263);t.Z=function(e){var t=e.className,n=e.py,s=e.scala,o=e.sourceLink,l=(0,r.Z)().siteConfig.customFields.version,i="https://mmlspark.blob.core.windows.net/docs/"+l+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+l+"/scala/"+s;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:i},t)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:c},t)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:o},t)))))}},4522:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return y},default:function(){return f}});var a=n(2122),r=n(9756),s=(n(7294),n(3905)),o=n(5386),l=n(1332),i=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_Translator",id:"documentation/transformers/cognitive/_Translator",isDocsHomePage:!1,title:"_Translator",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_Translator.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_Translator",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_Translator",version:"current",frontMatter:{}},y=[{value:"Translator",id:"translator",children:[{value:"Translate",id:"translate",children:[]},{value:"Transliterate",id:"transliterate",children:[]},{value:"Detect",id:"detect",children:[]},{value:"BreakSentence",id:"breaksentence",children:[]},{value:"DictionaryLookup",id:"dictionarylookup",children:[]},{value:"DictionaryExamples",id:"dictionaryexamples",children:[]},{value:"DocumentTranslator",id:"documenttranslator",children:[]}]}],d={toc:y};function f(e){var t=e.components,n=(0,r.Z)(e,c);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"translator"},"Translator"),(0,s.kt)("h3",{id:"translate"},"Translate"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["Hello, what is your name?", "Bye"],)\n], ["text",])\n\ntranslate = (Translate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setToLanguage(["zh-Hans", "fr"])\n            .setOutputCol("translation")\n            .setConcurrency(5))\n\ndisplay(translate\n      .transform(df)\n      .withColumn("translation", flatten(col("translation.translations")))\n      .withColumn("translation", col("translation.text"))\n      .select("translation"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?", "Bye")).toDF("text")\n\nval translate = (new Translate()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setTextCol("text")\n                  .setToLanguage(Seq("zh-Hans", "fr"))\n                  .setOutputCol("translation")\n                  .setConcurrency(5))\n\ndisplay(translate\n      .transform(df)\n      .withColumn("translation", flatten(col("translation.translations")))\n      .withColumn("translation", col("translation.text"))\n      .select("translation"))\n')))),(0,s.kt)(i.Z,{className:"Translate",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Translate",scala:"com/microsoft/azure/synapse/ml/cognitive/Translate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"transliterate"},"Transliterate"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089"],)\n], ["text",])\n\ntransliterate = (Transliterate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setLanguage("ja")\n            .setFromScript("Jpan")\n            .setToScript("Latn")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(transliterate\n    .transform(df)\n    .withColumn("text", col("result.text"))\n    .withColumn("script", col("result.script"))\n    .select("text", "script"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089")).toDF("text")\n\nval transliterate = (new Transliterate()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setLanguage("ja")\n                        .setFromScript("Jpan")\n                        .setToScript("Latn")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(transliterate\n    .transform(df)\n    .withColumn("text", col("result.text"))\n    .withColumn("script", col("result.script"))\n    .select("text", "script"))\n')))),(0,s.kt)(i.Z,{className:"Transliterate",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Transliterate",scala:"com/microsoft/azure/synapse/ml/cognitive/Transliterate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"detect"},"Detect"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\ndetect = (Detect()\n      .setSubscriptionKey(translatorKey)\n      .setLocation("eastus")\n      .setTextCol("text")\n      .setOutputCol("result"))\n\ndisplay(detect\n    .transform(df)\n    .withColumn("language", col("result.language"))\n    .select("language"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval detect = (new Detect()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(detect\n    .transform(df)\n    .withColumn("language", col("result.language"))\n    .select("language"))\n')))),(0,s.kt)(i.Z,{className:"Detect",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Detect",scala:"com/microsoft/azure/synapse/ml/cognitive/Detect.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"breaksentence"},"BreakSentence"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\nbreakSentence = (BreakSentence()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(breakSentence\n    .transform(df)\n    .withColumn("sentLen", flatten(col("result.sentLen")))\n    .select("sentLen"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval breakSentence = (new BreakSentence()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(breakSentence\n    .transform(df)\n    .withColumn("sentLen", flatten(col("result.sentLen")))\n    .select("sentLen"))\n')))),(0,s.kt)(i.Z,{className:"BreakSentence",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.BreakSentence",scala:"com/microsoft/azure/synapse/ml/cognitive/BreakSentence.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"dictionarylookup"},"DictionaryLookup"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["fly"],)\n], ["text",])\n\ndictionaryLookup = (DictionaryLookup()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setTextCol("text")\n                  .setOutputCol("result"))\n\ndisplay(dictionaryLookup\n    .transform(df)\n    .withColumn("translations", flatten(col("result.translations")))\n    .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n    .select("normalizedTarget"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("fly")).toDF("text")\n\nval dictionaryLookup = (new DictionaryLookup()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setFromLanguage("en")\n                        .setToLanguage("es")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(dictionaryLookup\n      .transform(df)\n      .withColumn("translations", flatten(col("result.translations")))\n      .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n      .select("normalizedTarget"))\n')))),(0,s.kt)(i.Z,{className:"DictionaryLookup",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DictionaryLookup",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryLookup.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"dictionaryexamples"},"DictionaryExamples"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  ([("fly", "volar")],)\n], ["textAndTranslation",])\n\ndictionaryExamples = (DictionaryExamples()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setOutputCol("result"))\n\ndisplay(dictionaryExamples\n    .transform(df)\n    .withColumn("examples", flatten(col("result.examples")))\n    .select("examples"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List(("fly", "volar"))).toDF("textAndTranslation")\n\nval dictionaryExamples = (new DictionaryExamples()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setFromLanguage("en")\n                        .setToLanguage("es")\n                        .setOutputCol("result"))\n\ndisplay(dictionaryExamples\n    .transform(df)\n    .withColumn("examples", flatten(col("result.examples")))\n    .select("examples"))\n')))),(0,s.kt)(i.Z,{className:"DictionaryExamples",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DictionaryExamples",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryExamples.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"documenttranslator"},"DocumentTranslator"),(0,s.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ntranslatorName = os.environ.get("TRANSLATOR_NAME", "mmlspark-translator")\n\ndocumentTranslator = (DocumentTranslator()\n                  .setSubscriptionKey(translatorKey)\n                  .setServiceName(translatorName)\n                  .setSourceUrlCol("sourceUrl")\n                  .setTargetsCol("targets")\n                  .setOutputCol("translationStatus"))\n'))),(0,s.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval translatorName = sys.env.getOrElse("TRANSLATOR_NAME", None)\n\nval documentTranslator = (new DocumentTranslator()\n                        .setSubscriptionKey(translatorKey)\n                        .setServiceName(translatorName)\n                        .setSourceUrlCol("sourceUrl")\n                        .setTargetsCol("targets")\n                        .setOutputCol("translationStatus"))\n')))),(0,s.kt)(i.Z,{className:"DocumentTranslator",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DocumentTranslator",scala:"com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.scala",mdxType:"DocTable"}))}f.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);