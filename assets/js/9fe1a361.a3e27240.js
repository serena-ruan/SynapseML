(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[1918],{3905:function(e,a,s){"use strict";s.d(a,{Zo:function(){return u},kt:function(){return d}});var t=s(7294);function n(e,a,s){return a in e?Object.defineProperty(e,a,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[a]=s,e}function r(e,a){var s=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),s.push.apply(s,t)}return s}function o(e){for(var a=1;a<arguments.length;a++){var s=null!=arguments[a]?arguments[a]:{};a%2?r(Object(s),!0).forEach((function(a){n(e,a,s[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(s)):r(Object(s)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(s,a))}))}return e}function l(e,a){if(null==e)return{};var s,t,n=function(e,a){if(null==e)return{};var s,t,n={},r=Object.keys(e);for(t=0;t<r.length;t++)s=r[t],a.indexOf(s)>=0||(n[s]=e[s]);return n}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(t=0;t<r.length;t++)s=r[t],a.indexOf(s)>=0||Object.prototype.propertyIsEnumerable.call(e,s)&&(n[s]=e[s])}return n}var m=t.createContext({}),c=function(e){var a=t.useContext(m),s=a;return e&&(s="function"==typeof e?e(a):o(o({},a),e)),s},u=function(e){var a=c(e.components);return t.createElement(m.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},i=t.forwardRef((function(e,a){var s=e.components,n=e.mdxType,r=e.originalType,m=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),i=c(s),d=n,y=i["".concat(m,".").concat(d)]||i[d]||p[d]||r;return s?t.createElement(y,o(o({ref:a},u),{},{components:s})):t.createElement(y,o({ref:a},u))}));function d(e,a){var s=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=s.length,o=new Array(r);o[0]=i;var l={};for(var m in a)hasOwnProperty.call(a,m)&&(l[m]=a[m]);l.originalType=e,l.mdxType="string"==typeof e?e:n,o[1]=l;for(var c=2;c<r;c++)o[c]=s[c];return t.createElement.apply(null,o)}return t.createElement.apply(null,s)}i.displayName="MDXCreateElement"},1332:function(e,a,s){"use strict";var t=s(7294);a.Z=function(e){var a=e.children,s=e.hidden,n=e.className;return t.createElement("div",{role:"tabpanel",hidden:s,className:n},a)}},5386:function(e,a,s){"use strict";s.d(a,{Z:function(){return p}});var t=s(7294),n=s(8578);var r=function(){var e=(0,t.useContext)(n.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=s(6010),l="tabItem_2kG2",m="tabItemActive_3NDg";var c=37,u=39;var p=function(e){var a=e.lazy,s=e.block,n=e.defaultValue,p=e.values,i=e.groupId,d=e.className,y=r(),f=y.tabGroupChoices,b=y.setTabGroupChoices,g=(0,t.useState)(n),h=g[0],k=g[1],T=t.Children.toArray(e.children),v=[];if(null!=i){var D=f[i];null!=D&&D!==h&&p.some((function(e){return e.value===D}))&&k(D)}var x=function(e){var a=e.currentTarget,s=v.indexOf(a),t=p[s].value;k(t),null!=i&&(b(i,t),setTimeout((function(){var e,s,t,n,r,o,l,c;(e=a.getBoundingClientRect(),s=e.top,t=e.left,n=e.bottom,r=e.right,o=window,l=o.innerHeight,c=o.innerWidth,s>=0&&r<=c&&n<=l&&t>=0)||(a.scrollIntoView({block:"center",behavior:"smooth"}),a.classList.add(m),setTimeout((function(){return a.classList.remove(m)}),2e3))}),150))},N=function(e){var a,s;switch(e.keyCode){case u:var t=v.indexOf(e.target)+1;s=v[t]||v[0];break;case c:var n=v.indexOf(e.target)-1;s=v[n]||v[v.length-1]}null==(a=s)||a.focus()};return t.createElement("div",{className:"tabs-container"},t.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":s},d)},p.map((function(e){var a=e.value,s=e.label;return t.createElement("li",{role:"tab",tabIndex:h===a?0:-1,"aria-selected":h===a,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":h===a}),key:a,ref:function(e){return v.push(e)},onKeyDown:N,onFocus:x,onClick:x},s)}))),a?(0,t.cloneElement)(T.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):t.createElement("div",{className:"margin-vert--md"},T.map((function(e,a){return(0,t.cloneElement)(e,{key:a,hidden:e.props.value!==h})}))))}},8578:function(e,a,s){"use strict";var t=(0,s(7294).createContext)(void 0);a.Z=t},1989:function(e,a,s){"use strict";var t=s(7294),n=s(2263);a.Z=function(e){var a=e.className,s=e.py,r=e.scala,o=e.sourceLink,l=(0,n.Z)().siteConfig.customFields.version,m="https://mmlspark.blob.core.windows.net/docs/"+l+"/pyspark/"+s,c="https://mmlspark.blob.core.windows.net/docs/"+l+"/scala/"+r;return t.createElement("table",null,t.createElement("tbody",null,t.createElement("tr",null,t.createElement("td",null,t.createElement("strong",null,"Python API: "),t.createElement("a",{href:m},a)),t.createElement("td",null,t.createElement("strong",null,"Scala API: "),t.createElement("a",{href:c},a)),t.createElement("td",null,t.createElement("strong",null,"Source: "),t.createElement("a",{href:o},a)))))}},8957:function(e,a,s){"use strict";s.r(a),s.d(a,{frontMatter:function(){return u},contentTitle:function(){return p},metadata:function(){return i},toc:function(){return d},default:function(){return f}});var t=s(2122),n=s(9756),r=(s(7294),s(3905)),o=s(5386),l=s(1332),m=s(1989),c=["components"],u={},p=void 0,i={unversionedId:"documentation/transformers/core/_Stages",id:"version-0.9.1/documentation/transformers/core/_Stages",isDocsHomePage:!1,title:"_Stages",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.1/documentation/transformers/core/_Stages.md",sourceDirName:"documentation/transformers/core",slug:"/documentation/transformers/core/_Stages",permalink:"/SynapseML/docs/documentation/transformers/core/_Stages",version:"0.9.1",frontMatter:{}},d=[{value:"Stages",id:"stages",children:[{value:"Cacher",id:"cacher",children:[]},{value:"DropColumns",id:"dropcolumns",children:[]},{value:"EnsembleByKey",id:"ensemblebykey",children:[]},{value:"Explode",id:"explode",children:[]},{value:"Lambda",id:"lambda",children:[]},{value:"DynamicMiniBatchTransformer",id:"dynamicminibatchtransformer",children:[]},{value:"FixedMiniBatchTransformer",id:"fixedminibatchtransformer",children:[]},{value:"TimeIntervalMiniBatchTransformer",id:"timeintervalminibatchtransformer",children:[]},{value:"FlattenBatch",id:"flattenbatch",children:[]},{value:"RenameColumn",id:"renamecolumn",children:[]},{value:"Repartition",id:"repartition",children:[]},{value:"SelectColumns",id:"selectcolumns",children:[]},{value:"StratifiedRepartition",id:"stratifiedrepartition",children:[]},{value:"SummarizeData",id:"summarizedata",children:[]},{value:"TextPreprocessor",id:"textpreprocessor",children:[]},{value:"UDFTransformer",id:"udftransformer",children:[]},{value:"UnicodeNormalize",id:"unicodenormalize",children:[]}]}],y={toc:d};function f(e){var a=e.components,s=(0,n.Z)(e,c);return(0,r.kt)("wrapper",(0,t.Z)({},y,s,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"stages"},"Stages"),(0,r.kt)("h3",{id:"cacher"},"Cacher"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n      ], ["numbers", "words", "more"]))\n\ncacher = Cacher()\n\ndisplay(cacher.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = Seq(\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n    ).toDF("numbers", "words", "more")\n\nval cacher = new Cacher()\n\ndisplay(cacher.transform(df))\n')))),(0,r.kt)(m.Z,{className:"HTTPTransformer",py:"synapse.ml.stages.html#module-synapse.ml.stages.Cacher",scala:"com/microsoft/azure/synapse/ml/stages/Cacher.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Cacher.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"dropcolumns"},"DropColumns"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true)\n      ], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\ndc = DropColumns().setCols([])\n\ndisplay(dc.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval dc = new DropColumns().setCols(Array())\n\ndisplay(dc.transform(df))\n')))),(0,r.kt)(m.Z,{className:"DropColumns",py:"synapse.ml.stages.html#module-synapse.ml.stages.DropColumns",scala:"com/microsoft/azure/synapse/ml/stages/DropColumns.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/DropColumns.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"ensemblebykey"},"EnsembleByKey"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\nscoreDF = (spark.createDataFrame([\n      (0, "foo", 1.0, .1),\n      (1, "bar", 4.0, -2.0),\n      (1, "bar", 0.0, -3.0)\n      ], ["label1", "label2", "score1", "score2"]))\n\nva = VectorAssembler().setInputCols(["score1", "score2"]).setOutputCol("v1")\nscoreDF2 = va.transform(scoreDF)\n\nebk = EnsembleByKey().setKey("label1").setCol("score1")\n\ndisplay(ebk.transform(scoreDF2))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.ml.feature.VectorAssembler\n\nval scoreDF = (Seq(\n      (0, "foo", 1.0, .1),\n      (1, "bar", 4.0, -2.0),\n      (1, "bar", 0.0, -3.0))\n      .toDF("label1", "label2", "score1", "score2"))\n\nval va = new VectorAssembler().setInputCols(Array("score1", "score2")).setOutputCol("v1")\nval scoreDF2 = va.transform(scoreDF)\n\nval ebk = new EnsembleByKey().setKey("label1").setCol("score1")\n\ndisplay(ebk.transform(scoreDF2))\n')))),(0,r.kt)(m.Z,{className:"EnsembleByKey",py:"synapse.ml.stages.html#module-synapse.ml.stages.EnsembleByKey",scala:"com/microsoft/azure/synapse/ml/stages/EnsembleByKey.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/EnsembleByKey.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"explode"},"Explode"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, ["guitars", "drums"]),\n      (1, ["piano"]),\n      (2, [])\n      ], ["numbers", "words"]))\n\nexplode = Explode().setInputCol("words").setOutputCol("exploded")\n\ndisplay(explode.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, Seq("guitars", "drums")),\n    (1, Seq("piano")),\n    (2, Seq()))\n    .toDF("numbers", "words"))\n\nval explode = new Explode().setInputCol("words").setOutputCol("exploded")\n\ndisplay(explode.transform(df))\n')))),(0,r.kt)(m.Z,{className:"Explode",py:"synapse.ml.stages.html#module-synapse.ml.stages.Explode",scala:"com/microsoft/azure/synapse/ml/stages/Explode.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Explode.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"lambda"},"Lambda"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.types import StringType, StructType\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n      ], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nl = (Lambda()\n      .setTransform(lambda df : df.select("numbers"))\n      .setTransformSchema(lambda schema : StructType([schema("numbers")])))\n\ndisplay(l.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.sql.types.{StringType, StructType}\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval lambda = (new Lambda()\n      .setTransform(df => df.select("numbers"))\n      .setTransformSchema(schema => new StructType(Array(schema("numbers")))))\n\ndisplay(lambda.transform(df))\n')))),(0,r.kt)(m.Z,{className:"Lambda",py:"synapse.ml.stages.html#module-mmlspark.stages.Lambda",scala:"com/microsoft/azure/synapse/ml/stages/Lambda.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Lambda.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"dynamicminibatchtransformer"},"DynamicMiniBatchTransformer"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.types import StringType, StructType\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ndmbt = DynamicMiniBatchTransformer()\n\ndisplay(dmbt.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval dmbt = new DynamicMiniBatchTransformer()\n\ndisplay(dmbt.transform(df))\n')))),(0,r.kt)(m.Z,{className:"DynamicMiniBatchTransformer",py:"mmlspark.stages.html#module-mmlspark.stages.DynamicMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/DynamicMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"fixedminibatchtransformer"},"FixedMiniBatchTransformer"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from synapse.ml.stages import *\n\nfmbt = (FixedMiniBatchTransformer()\n      .setBuffered(true)\n      .setBatchSize(3))\n"))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},"import com.microsoft.azure.synapse.ml.stages._\n\nval fmbt = (new FixedMiniBatchTransformer()\n      .setBuffered(true)\n      .setBatchSize(3))\n")))),(0,r.kt)(m.Z,{className:"FixedMiniBatchTransformer",py:"mmlspark.stages.html#module-mmlspark.stages.FixedMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/FixedMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"timeintervalminibatchtransformer"},"TimeIntervalMiniBatchTransformer"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ntimbt = (TimeIntervalMiniBatchTransformer()\n        .setMillisToWait(1000)\n        .setMaxBatchSize(30))\n\ndisplay(timbt.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval timbt = (new TimeIntervalMiniBatchTransformer()\n        .setMillisToWait(1000)\n        .setMaxBatchSize(30))\n\ndisplay(timbt.transform(df))\n')))),(0,r.kt)(m.Z,{className:"TimeIntervalMiniBatchTransformer",py:"mmlspark.stages.html#module-mmlspark.stages.TimeIntervalMiniBatchTransformer",scala:"com/microsoft/azure/synapse/ml/stages/TimeIntervalMiniBatchTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"flattenbatch"},"FlattenBatch"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([(_, "foo") for _ in range(1, 11)], ["in1", "in2"]))\n\ntransDF = DynamicMiniBatchTransformer().transform(df)\n\nfb = FlattenBatch()\n\ndisplay(fb.transform(transDF))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (1 until 11).map(x => (x, "foo")).toDF("in1", "in2")\n\nval transDF = new DynamicMiniBatchTransformer().transform(df)\n\nval fb = new FlattenBatch()\n\ndisplay(fb.transform(transDF))\n')))),(0,r.kt)(m.Z,{className:"FlattenBatch",py:"mmlspark.stages.html#module-mmlspark.stages.FlattenBatch",scala:"com/microsoft/azure/synapse/ml/stages/FlattenBatch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/MiniBatchTransformer.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"renamecolumn"},"RenameColumn"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nrc = RenameColumn().setInputCol("words").setOutputCol("numbers")\n\ndisplay(rc.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval rc = new RenameColumn().setInputCol("words").setOutputCol("numbers")\n\ndisplay(rc.transform(df))\n')))),(0,r.kt)(m.Z,{className:"RenameColumn",py:"mmlspark.stages.html#module-mmlspark.stages.RenameColumn",scala:"com/microsoft/azure/synapse/ml/stages/RenameColumn.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/RenameColumn.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"repartition"},"Repartition"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "guitars", "drums"),\n      (1, "piano", "trumpet"),\n      (2, "bass", "cymbals"),\n      (3, "guitars", "drums"),\n      (4, "piano", "trumpet"),\n      (5, "bass", "cymbals"),\n      (6, "guitars", "drums"),\n      (7, "piano", "trumpet"),\n      (8, "bass", "cymbals"),\n      (9, "guitars", "drums"),\n      (10, "piano", "trumpet"),\n      (11, "bass", "cymbals")\n], ["numbers", "words", "more"]))\n\nrepartition = Repartition().setN(1)\n\ndisplay(repartition.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, "guitars", "drums"),\n    (1, "piano", "trumpet"),\n    (2, "bass", "cymbals"),\n    (3, "guitars", "drums"),\n    (4, "piano", "trumpet"),\n    (5, "bass", "cymbals"),\n    (6, "guitars", "drums"),\n    (7, "piano", "trumpet"),\n    (8, "bass", "cymbals"),\n    (9, "guitars", "drums"),\n    (10, "piano", "trumpet"),\n    (11, "bass", "cymbals")\n  ).toDF("numbers", "words", "more"))\n\nval repartition = new Repartition().setN(1)\n\ndisplay(repartition.transform(df))\n')))),(0,r.kt)(m.Z,{className:"Repartition",py:"mmlspark.stages.html#module-mmlspark.stages.Repartition",scala:"com/microsoft/azure/synapse/ml/stages/Repartition.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/Repartition.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"selectcolumns"},"SelectColumns"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "words", "more"]))\n\nsc = SelectColumns().setCols(["words", "more"])\n\ndisplay(sc.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval sc = new SelectColumns().setCols(Array("words", "more"))\n\ndisplay(sc.transform(df))\n')))),(0,r.kt)(m.Z,{className:"SelectColumns",py:"mmlspark.stages.html#module-mmlspark.stages.SelectColumns",scala:"com/microsoft/azure/synapse/ml/stages/SelectColumns.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/SelectColumns.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"stratifiedrepartition"},"StratifiedRepartition"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, "Blue", 2),\n      (0, "Red", 2),\n      (0, "Green", 2),\n      (1, "Purple", 2),\n      (1, "Orange", 2),\n      (1, "Indigo", 2),\n      (2, "Violet", 2),\n      (2, "Black", 2),\n      (2, "White", 2),\n      (3, "Gray", 2),\n      (3, "Yellow", 2),\n      (3, "Cerulean", 2)\n], ["values", "colors", "const"]))\n\nsr = StratifiedRepartition().setLabelCol("values").setMode("equal")\n\ndisplay(sr.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    (0, "Blue", 2),\n    (0, "Red", 2),\n    (0, "Green", 2),\n    (1, "Purple", 2),\n    (1, "Orange", 2),\n    (1, "Indigo", 2),\n    (2, "Violet", 2),\n    (2, "Black", 2),\n    (2, "White", 2),\n    (3, "Gray", 2),\n    (3, "Yellow", 2),\n    (3, "Cerulean", 2)\n  ).toDF("values", "colors", "const"))\n\nval sr = new StratifiedRepartition().setLabelCol("values").setMode("equal")\n\ndisplay(sr.transform(df))\n')))),(0,r.kt)(m.Z,{className:"StratifiedRepartition",py:"mmlspark.stages.html#module-mmlspark.stages.StratifiedRepartition",scala:"com/microsoft/azure/synapse/ml/stages/StratifiedRepartition.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/StratifiedRepartition.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"summarizedata"},"SummarizeData"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nsummary = SummarizeData()\n\ndisplay(summary.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval summary = new SummarizeData()\n\ndisplay(summary.transform(df))\n')))),(0,r.kt)(m.Z,{className:"SummarizeData",py:"mmlspark.stages.html#module-mmlspark.stages.SummarizeData",scala:"com/microsoft/azure/synapse/ml/stages/SummarizeData.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/SummarizeData.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"textpreprocessor"},"TextPreprocessor"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      ("The happy sad boy drank sap", ),\n      ("The hater sad doy drank sap", ),\n      ("foo", ),\n      ("The hater sad doy aABc0123456789Zz_", )\n], ["words1"]))\n\ntestMap = {"happy": "sad", "hater": "sap",\n      "sad": "sap", "sad doy": "sap"}\n\ntextPreprocessor = (TextPreprocessor()\n      .setNormFunc("lowerCase")\n      .setMap(testMap)\n      .setInputCol("words1")\n      .setOutputCol("out"))\n\ndisplay(textPreprocessor.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    ("The happy sad boy drank sap", ),\n    ("The hater sad doy drank sap", ),\n    ("foo", ),\n    ("The hater sad doy aABc0123456789Zz_", ))\n    .toDF("words1"))\n\nval testMap = Map[String, String] (\n    "happy"   -> "sad",\n    "hater"   -> "sap",\n    "sad"     -> "sap",\n    "sad doy" -> "sap"\n  )\n\nval textPreprocessor = (new TextPreprocessor()\n      .setNormFunc("lowerCase")\n      .setMap(testMap)\n      .setInputCol("words1")\n      .setOutputCol("out"))\n\ndisplay(textPreprocessor.transform(df))\n')))),(0,r.kt)(m.Z,{className:"TextPreprocessor",py:"mmlspark.stages.html#module-mmlspark.stages.TextPreprocessor",scala:"com/microsoft/azure/synapse/ml/stages/TextPreprocessor.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/TextPreprocessor.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"udftransformer"},"UDFTransformer"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\nfrom pyspark.sql.functions import udf\n\ndf = (spark.createDataFrame([\n      (0, 0.0, "guitars", "drums", 1, True),\n      (1, 1.0, "piano", "trumpet", 2, False),\n      (2, 2.0, "bass", "cymbals", 3, True)\n], ["numbers", "doubles", "words", "more", "longs", "booleans"]))\n\nstringToIntegerUDF = udf(lambda x: 1)\n\nudfTransformer = (UDFTransformer()\n      .setUDF(stringToIntegerUDF)\n      .setInputCol("numbers")\n      .setOutputCol("out"))\n\ndisplay(udfTransformer.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\nimport org.apache.spark.sql.functions.udf\n\nval df = (Seq(\n      (0, 0.toDouble, "guitars", "drums", 1.toLong, true),\n      (1, 1.toDouble, "piano", "trumpet", 2.toLong, false),\n      (2, 2.toDouble, "bass", "cymbals", 3.toLong, true))\n      .toDF("numbers", "doubles", "words", "more", "longs", "booleans"))\n\nval stringToIntegerUDF = udf((_: String) => 1)\n\nval udfTransformer = (new UDFTransformer()\n      .setUDF(stringToIntegerUDF)\n      .setInputCol("numbers")\n      .setOutputCol("out"))\n\ndisplay(udfTransformer.transform(df))\n')))),(0,r.kt)(m.Z,{className:"UDFTransformer",py:"mmlspark.stages.html#module-mmlspark.stages.UDFTransformer",scala:"com/microsoft/azure/synapse/ml/stages/UDFTransformer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/UDFTransformer.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"unicodenormalize"},"UnicodeNormalize"),(0,r.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.stages import *\n\ndf = (spark.createDataFrame([\n      ("Sch\xf6n", 1),\n      ("Scho\\u0308n", 1),\n      (None, 1)\n], ["words1", "dummy"]))\n\nunicodeNormalize = (UnicodeNormalize()\n      .setForm("NFC")\n      .setInputCol("words1")\n      .setOutputCol("norm1"))\n\ndisplay(unicodeNormalize.transform(df))\n'))),(0,r.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.stages._\n\nval df = (Seq(\n    ("Sch\xf6n", 1),\n    ("Scho\\u0308n", 1),\n    (null, 1))\n    .toDF("words1", "dummy"))\n\nval unicodeNormalize = (new UnicodeNormalize()\n      .setForm("NFC")\n      .setInputCol("words1")\n      .setOutputCol("norm1"))\n\ndisplay(unicodeNormalize.transform(df))\n')))),(0,r.kt)(m.Z,{className:"UnicodeNormalize",py:"mmlspark.stages.html#module-mmlspark.stages.UnicodeNormalize",scala:"com/microsoft/azure/synapse/ml/stages/UnicodeNormalize.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/stages/UnicodeNormalize.scala",mdxType:"DocTable"}))}f.isMDXComponent=!0},6010:function(e,a,s){"use strict";function t(e){var a,s,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(s=t(e[a]))&&(n&&(n+=" "),n+=s);else for(a in e)e[a]&&(n&&(n+=" "),n+=a);return n}function n(){for(var e,a,s=0,n="";s<arguments.length;)(e=arguments[s++])&&(a=t(e))&&(n&&(n+=" "),n+=a);return n}s.d(a,{Z:function(){return n}})}}]);