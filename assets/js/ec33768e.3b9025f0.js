(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[6281],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return y}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,s=e.originalType,i=e.parentName,m=r(e,["components","mdxType","originalType","parentName"]),p=c(n),y=o,d=p["".concat(i,".").concat(y)]||p[y]||u[y]||s;return n?a.createElement(d,l(l({ref:t},m),{},{components:n})):a.createElement(d,l({ref:t},m))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var s=n.length,l=new Array(s);l[0]=p;var r={};for(var i in t)hasOwnProperty.call(t,i)&&(r[i]=t[i]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var c=2;c<s;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1332:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:o},t)}},5386:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7294),o=n(8578);var s=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},l=n(6010),r="tabItem_2kG2",i="tabItemActive_3NDg";var c=37,m=39;var u=function(e){var t=e.lazy,n=e.block,o=e.defaultValue,u=e.values,p=e.groupId,y=e.className,d=s(),g=d.tabGroupChoices,v=d.setTabGroupChoices,f=(0,a.useState)(o),b=f[0],k=f[1],z=a.Children.toArray(e.children),h=[];if(null!=p){var C=g[p];null!=C&&C!==b&&u.some((function(e){return e.value===C}))&&k(C)}var I=function(e){var t=e.currentTarget,n=h.indexOf(t),a=u[n].value;k(a),null!=p&&(v(p,a),setTimeout((function(){var e,n,a,o,s,l,r,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,o=e.bottom,s=e.right,l=window,r=l.innerHeight,c=l.innerWidth,n>=0&&s<=c&&o<=r&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},T=function(e){var t,n;switch(e.keyCode){case m:var a=h.indexOf(e.target)+1;n=h[a]||h[0];break;case c:var o=h.indexOf(e.target)-1;n=h[o]||h[h.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},y)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:b===t?0:-1,"aria-selected":b===t,className:(0,l.Z)("tabs__item",r,{"tabs__item--active":b===t}),key:t,ref:function(e){return h.push(e)},onKeyDown:T,onFocus:I,onClick:I},n)}))),t?(0,a.cloneElement)(z.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},z.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==b})}))))}},8578:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1989:function(e,t,n){"use strict";var a=n(7294),o=n(2263);t.Z=function(e){var t=e.className,n=e.py,s=e.scala,l=e.sourceLink,r=(0,o.Z)().siteConfig.customFields.version,i="https://mmlspark.blob.core.windows.net/docs/"+r+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+r+"/scala/"+s;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:i},t)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:c},t)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:l},t)))))}},8801:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return y},default:function(){return g}});var a=n(2122),o=n(9756),s=(n(7294),n(3905)),l=n(5386),r=n(1332),i=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_FormRecognizer",id:"documentation/transformers/cognitive/_FormRecognizer",isDocsHomePage:!1,title:"_FormRecognizer",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_FormRecognizer.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_FormRecognizer",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_FormRecognizer",version:"current",frontMatter:{}},y=[{value:"Form Recognizer",id:"form-recognizer",children:[{value:"AnalyzeLayout",id:"analyzelayout",children:[]},{value:"AnalyzeReceipts",id:"analyzereceipts",children:[]},{value:"AnalyzeBusinessCards",id:"analyzebusinesscards",children:[]},{value:"AnalyzeInvoices",id:"analyzeinvoices",children:[]},{value:"AnalyzeIDDocuments",id:"analyzeiddocuments",children:[]},{value:"AnalyzeCustomModel",id:"analyzecustommodel",children:[]},{value:"GetCustomModel",id:"getcustommodel",children:[]},{value:"ListCustomModels",id:"listcustommodels",children:[]}]}],d={toc:y};function g(e){var t=e.components,n=(0,o.Z)(e,c);return(0,s.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"form-recognizer"},"Form Recognizer"),(0,s.kt)("h3",{id:"analyzelayout"},"AnalyzeLayout"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg",)\n], ["source",])\n\nanalyzeLayout = (AnalyzeLayout()\n            .setSubscriptionKey(cognitiveKey)\n            .setLocation("eastus")\n            .setImageUrlCol("source")\n            .setOutputCol("layout")\n            .setConcurrency(5))\n\ndisplay(analyzeLayout\n        .transform(imageDf)\n        .withColumn("lines", flatten(col("layout.analyzeResult.readResults.lines")))\n        .withColumn("readLayout", col("lines.text"))\n        .withColumn("tables", flatten(col("layout.analyzeResult.pageResults.tables")))\n        .withColumn("cells", flatten(col("tables.cells")))\n        .withColumn("pageLayout", col("cells.text"))\n        .select("source", "readLayout", "pageLayout"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg"\n  ).toDF("source")\n\nval analyzeLayout = (new AnalyzeLayout()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("layout")\n                        .setConcurrency(5))\n\ndisplay(analyzeLayout.transform(imageDf)\n')))),(0,s.kt)(i.Z,{className:"AnalyzeLayout",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeLayout",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeLayout.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzereceipts"},"AnalyzeReceipts"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",),\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",)\n], ["image",])\n\nanalyzeReceipts = (AnalyzeReceipts()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("receipts")\n                  .setConcurrency(5))\n\ndisplay(analyzeReceipts.transform(imageDf))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png"\n  ).toDF("source")\n\nval analyzeReceipts = (new AnalyzeReceipts()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("receipts")\n                        .setConcurrency(5))\n\ndisplay(analyzeReceipts.transform(imageDf))\n')))),(0,s.kt)(i.Z,{className:"AnalyzeReceipts",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeReceipts",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeReceipts.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzebusinesscards"},"AnalyzeBusinessCards"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg",)\n], ["source",])\n\nanalyzeBusinessCards = (AnalyzeBusinessCards()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("businessCards")\n                        .setConcurrency(5))\n\ndisplay(analyzeBusinessCards.transform(imageDf)\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg"\n  ).toDF("source")\n\nval analyzeBusinessCards = (new AnalyzeBusinessCards()\n                              .setSubscriptionKey(cognitiveKey)\n                              .setLocation("eastus")\n                              .setImageUrlCol("source")\n                              .setOutputCol("businessCards")\n                              .setConcurrency(5))\n\ndisplay(analyzeBusinessCards.transform(imageDf)\n')))),(0,s.kt)(i.Z,{className:"AnalyzeBusinessCards",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeBusinessCards",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeBusinessCards.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzeinvoices"},"AnalyzeInvoices"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeInvoices = (AnalyzeInvoices()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("invoices")\n                  .setConcurrency(5))\n\ndisplay(analyzeInvoices\n        .transform(imageDf)\n        .withColumn("documents", explode(col("invoices.analyzeResult.documentResults.fields")))\n        .select("source", "documents"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n  ).toDF("source")\n\nval analyzeInvoices = (new AnalyzeInvoices()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("invoices")\n                        .setConcurrency(5))\n\ndisplay(analyzeInvoices.transform(imageD4))\n')))),(0,s.kt)(i.Z,{className:"AnalyzeInvoices",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeInvoices",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeInvoices.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzeiddocuments"},"AnalyzeIDDocuments"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg",)\n], ["source",])\n\nanalyzeIDDocuments = (AnalyzeIDDocuments()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("ids")\n                  .setConcurrency(5))\n\ndisplay(analyzeIDDocuments\n        .transform(imageDf)\n        .withColumn("documents", explode(col("ids.analyzeResult.documentResults.fields")))\n        .select("source", "documents"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg"\n  ).toDF("source")\n\nval analyzeIDDocuments = (new AnalyzeIDDocuments()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("ids")\n                        .setConcurrency(5))\n\ndisplay(analyzeIDDocuments.transform(imageDf))\n')))),(0,s.kt)(i.Z,{className:"AnalyzeIDDocuments",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeIDDocuments",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeIDDocuments.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"analyzecustommodel"},"AnalyzeCustomModel"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeCustomModel = (AnalyzeCustomModel()\n                 .setSubscriptionKey(cognitiveKey)\n                 .setLocation("eastus")\n                 .setModelId(modelId)\n                 .setImageUrlCol("source")\n                 .setOutputCol("output")\n                 .setConcurrency(5))\n\ndisplay(analyzeCustomModel\n        .transform(imageDf)\n        .withColumn("keyValuePairs", flatten(col("output.analyzeResult.pageResults.keyValuePairs")))\n        .withColumn("keys", col("keyValuePairs.key.text"))\n        .withColumn("values", col("keyValuePairs.value.text"))\n        .withColumn("keyValuePairs", create_map(lit("key"), col("keys"), lit("value"), col("values")))\n        .select("source", "keyValuePairs"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n  ).toDF("source")\n\nval analyzeCustomModel = (new AnalyzeCustomModel()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setModelId(modelId)\n                        .setImageUrlCol("source")\n                        .setOutputCol("output")\n                        .setConcurrency(5))\n\ndisplay(analyzeCustomModel.transform(imageDf))\n')))),(0,s.kt)(i.Z,{className:"AnalyzeCustomModel",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"getcustommodel"},"GetCustomModel"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nemptyDf = spark.createDataFrame([("",)])\n\ngetCustomModel = (GetCustomModel()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setModelId(modelId)\n                  .setIncludeKeys(true)\n                  .setOutputCol("model")\n                  .setConcurrency(5))\n\ndisplay(getCustomModel\n        .transform(emptyDf)\n        .withColumn("modelInfo", col("model.ModelInfo"))\n        .withColumn("trainResult", col("model.TrainResult"))\n        .select("modelInfo", "trainResult"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval emptyDf = Seq("").toDF()\n\nval getCustomModel = (new GetCustomModel()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setModelId(modelId)\n                        .setIncludeKeys(true)\n                        .setOutputCol("model")\n                        .setConcurrency(5))\n\ndisplay(getCustomModel.transform(emptyDf))\n')))),(0,s.kt)(i.Z,{className:"GetCustomModel",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GetCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/GetCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,s.kt)("h3",{id:"listcustommodels"},"ListCustomModels"),(0,s.kt)(l.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,s.kt)(r.Z,{value:"py",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nemptyDf = spark.createDataFrame([("",)])\n\nlistCustomModels = (ListCustomModels()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setOp("full")\n                  .setOutputCol("models")\n                  .setConcurrency(5))\n\ndisplay(listCustomModels\n       .transform(emptyDf)\n       .withColumn("modelIds", col("models.modelList.modelId"))\n       .select("modelIds"))\n'))),(0,s.kt)(r.Z,{value:"scala",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval emptyDf = Seq("").toDF()\n\nval listCustomModels = (new ListCustomModels()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setOp("full")\n                        .setOutputCol("models")\n                        .setConcurrency(5))\n\ndisplay(listCustomModels.transform(emptyDf))\n')))),(0,s.kt)(i.Z,{className:"ListCustomModels",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.ListCustomModels",scala:"com/microsoft/azure/synapse/ml/cognitive/ListCustomModels.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}function o(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(o&&(o+=" "),o+=t);return o}n.d(t,{Z:function(){return o}})}}]);