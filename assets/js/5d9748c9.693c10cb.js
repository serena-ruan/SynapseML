(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[3275],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return g}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),u=c(n),g=s,d=u["".concat(l,".").concat(g)]||u[g]||p[g]||o;return n?a.createElement(d,r(r({ref:t},m),{},{components:n})):a.createElement(d,r({ref:t},m))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1332:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:s},t)}},5386:function(e,t,n){"use strict";n.d(t,{Z:function(){return p}});var a=n(7294),s=n(8578);var o=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(6010),i="tabItem_2kG2",l="tabItemActive_3NDg";var c=37,m=39;var p=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,p=e.values,u=e.groupId,g=e.className,d=o(),y=d.tabGroupChoices,v=d.setTabGroupChoices,b=(0,a.useState)(s),f=b[0],k=b[1],h=a.Children.toArray(e.children),C=[];if(null!=u){var I=y[u];null!=I&&I!==f&&p.some((function(e){return e.value===I}))&&k(I)}var T=function(e){var t=e.currentTarget,n=C.indexOf(t),a=p[n].value;k(a),null!=u&&(v(u,a),setTimeout((function(){var e,n,a,s,o,r,i,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,s=e.bottom,o=e.right,r=window,i=r.innerHeight,c=r.innerWidth,n>=0&&o<=c&&s<=i&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},O=function(e){var t,n;switch(e.keyCode){case m:var a=C.indexOf(e.target)+1;n=C[a]||C[0];break;case c:var s=C.indexOf(e.target)-1;n=C[s]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},g)},p.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:f===t?0:-1,"aria-selected":f===t,className:(0,r.Z)("tabs__item",i,{"tabs__item--active":f===t}),key:t,ref:function(e){return C.push(e)},onKeyDown:O,onFocus:T,onClick:T},n)}))),t?(0,a.cloneElement)(h.filter((function(e){return e.props.value===f}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==f})}))))}},8578:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1989:function(e,t,n){"use strict";var a=n(7294),s=n(2263);t.Z=function(e){var t=e.className,n=e.py,o=e.scala,r=e.sourceLink,i=(0,s.Z)().siteConfig.customFields.version,l="https://mmlspark.blob.core.windows.net/docs/"+i+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+i+"/scala/"+o;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:l},t)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:c},t)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:r},t)))))}},1299:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return g},default:function(){return y}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},p=void 0,u={unversionedId:"documentation/transformers/cognitive/_ComputerVision",id:"version-0.9.1/documentation/transformers/cognitive/_ComputerVision",isDocsHomePage:!1,title:"_ComputerVision",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.1/documentation/transformers/cognitive/_ComputerVision.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_ComputerVision",permalink:"/SynapseML/docs/documentation/transformers/cognitive/_ComputerVision",version:"0.9.1",frontMatter:{}},g=[{value:"Computer Vision",id:"computer-vision",children:[{value:"OCR",id:"ocr",children:[]},{value:"AnalyzeImage",id:"analyzeimage",children:[]},{value:"RecognizeText",id:"recognizetext",children:[]},{value:"ReadImage",id:"readimage",children:[]},{value:"RecognizeDomainSpecificContent",id:"recognizedomainspecificcontent",children:[]},{value:"GenerateThumbnails",id:"generatethumbnails",children:[]},{value:"TagImage",id:"tagimage",children:[]},{value:"DescribeImage",id:"describeimage",children:[]}]}],d={toc:g};function y(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"computer-vision"},"Computer Vision"),(0,o.kt)("h3",{id:"ocr"},"OCR"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\n\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n    ], ["url", ])\n\nocr = (OCR()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setDetectOrientation(True)\n        .setOutputCol("ocr"))\n\ndisplay(ocr.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg"\n  ).toDF("url")\n\n\nval ocr = (new OCR()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setDetectOrientation(true)\n        .setOutputCol("ocr"))\n\ndisplay(ocr.transform(df))\n')))),(0,o.kt)(l.Z,{className:"OCR",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.OCR",scala:"com/microsoft/azure/synapse/ml/cognitive/OCR.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzeimage"},"AnalyzeImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/objects.jpg", ),\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/dog.jpg", ),\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/house.jpg", )\n    ], ["image", ])\n\n\nai = (AnalyzeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setLanguageCol("language")\n        .setVisualFeatures(["Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"])\n        .setDetails(["Celebrities", "Landmarks"])\n        .setOutputCol("features"))\n\ndisplay(ai.transform(df).select("url", "features.description.tags"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", "en"),\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", null),\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", "en")\n  ).toDF("url", "language")\n\nval ai = (new AnalyzeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setLanguageCol("language")\n        .setVisualFeatures(Seq("Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"))\n        .setDetails(Seq("Celebrities", "Landmarks"))\n        .setOutputCol("features"))\n\ndisplay(ai.transform(df).select("url", "features"))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.AnalyzeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"recognizetext"},"RecognizeText"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nrt = (RecognizeText()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setMode("Printed")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(rt.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n  ).toDF("url")\n\nval rt = (new RecognizeText()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setMode("Printed")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(rt.transform(df))\n')))),(0,o.kt)(l.Z,{className:"RecognizeText",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.RecognizeText",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeText.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"readimage"},"ReadImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nri = (ReadImage()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("ocr")\n    .setConcurrency(5))\n\ndisplay(ri.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n  ).toDF("url")\n\nval ri = (new ReadImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(ri.transform(df))\n')))),(0,o.kt)(l.Z,{className:"ReadImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.ReadImage",scala:"com/microsoft/azure/synapse/ml/cognitive/ReadImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"recognizedomainspecificcontent"},"RecognizeDomainSpecificContent"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg", )\n    ], ["url", ])\n\nceleb = (RecognizeDomainSpecificContent()\n        .setSubscriptionKey(cognitiveKey)\n        .setModel("celebrities")\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("celebs"))\n\ndisplay(celeb.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n  ).toDF("url")\n\nval celeb = (new RecognizeDomainSpecificContent()\n                .setSubscriptionKey(cognitiveKey)\n                .setModel("celebrities")\n                .setLocation("eastus")\n                .setImageUrlCol("url")\n                .setOutputCol("celebs"))\n\ndisplay(celeb.transform(df))\n')))),(0,o.kt)(l.Z,{className:"RecognizeDomainSpecificContent",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.RecognizeDomainSpecificContent",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeDomainSpecificContent.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"generatethumbnails"},"GenerateThumbnails"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ngt = (GenerateThumbnails()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setHeight(50)\n        .setWidth(50)\n        .setSmartCropping(True)\n        .setImageUrlCol("url")\n        .setOutputCol("thumbnails"))\n\ndisplay(gt.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval gt = (new GenerateThumbnails()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setHeight(50)\n        .setWidth(50)\n        .setSmartCropping(true)\n        .setImageUrlCol("url")\n        .setOutputCol("thumbnails"))\n\ndisplay(gt.transform(df))\n')))),(0,o.kt)(l.Z,{className:"GenerateThumbnails",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GenerateThumbnails",scala:"com/microsoft/azure/synapse/ml/cognitive/GenerateThumbnails.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"tagimage"},"TagImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\nti = (TagImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("tags"))\n\ndisplay(ti.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval ti = (new TagImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("tags"))\n\ndisplay(ti.transform(df))\n')))),(0,o.kt)(l.Z,{className:"TagImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.TagImage",scala:"com/microsoft/azure/synapse/ml/cognitive/TagImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"describeimage"},"DescribeImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ndi = (DescribeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setMaxCandidates(3)\n        .setImageUrlCol("url")\n        .setOutputCol("descriptions"))\n\ndisplay(di.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval di = (new DescribeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setMaxCandidates(3)\n        .setImageUrlCol("url")\n        .setOutputCol("descriptions"))\n\ndisplay(di.transform(df))\n')))),(0,o.kt)(l.Z,{className:"DescribeImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DescribeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/DescribeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}))}y.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(s&&(s+=" "),s+=t);return s}n.d(t,{Z:function(){return s}})}}]);