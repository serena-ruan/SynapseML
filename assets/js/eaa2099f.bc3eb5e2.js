(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[7975],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return i},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var u=n.createContext({}),c=function(e){var t=n.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},i=function(e){var t=c(e.components);return n.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,i=s(e,["components","mdxType","originalType","parentName"]),p=c(a),f=r,d=p["".concat(u,".").concat(f)]||p[f]||m[f]||l;return a?n.createElement(d,o(o({ref:t},i),{},{components:a})):n.createElement(d,o({ref:t},i))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,o=new Array(l);o[0]=p;var s={};for(var u in t)hasOwnProperty.call(t,u)&&(s[u]=t[u]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<l;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}p.displayName="MDXCreateElement"},1332:function(e,t,a){"use strict";var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},5386:function(e,t,a){"use strict";a.d(t,{Z:function(){return m}});var n=a(7294),r=a(8578);var l=function(){var e=(0,n.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=a(6010),s="tabItem_2kG2",u="tabItemActive_3NDg";var c=37,i=39;var m=function(e){var t=e.lazy,a=e.block,r=e.defaultValue,m=e.values,p=e.groupId,f=e.className,d=l(),y=d.tabGroupChoices,b=d.setTabGroupChoices,v=(0,n.useState)(r),h=v[0],g=v[1],k=n.Children.toArray(e.children),z=[];if(null!=p){var x=y[p];null!=x&&x!==h&&m.some((function(e){return e.value===x}))&&g(x)}var C=function(e){var t=e.currentTarget,a=z.indexOf(t),n=m[a].value;g(n),null!=p&&(b(p,n),setTimeout((function(){var e,a,n,r,l,o,s,c;(e=t.getBoundingClientRect(),a=e.top,n=e.left,r=e.bottom,l=e.right,o=window,s=o.innerHeight,c=o.innerWidth,a>=0&&l<=c&&r<=s&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(u),setTimeout((function(){return t.classList.remove(u)}),2e3))}),150))},T=function(e){var t,a;switch(e.keyCode){case i:var n=z.indexOf(e.target)+1;a=z[n]||z[0];break;case c:var r=z.indexOf(e.target)-1;a=z[r]||z[z.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},f)},m.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:(0,o.Z)("tabs__item",s,{"tabs__item--active":h===t}),key:t,ref:function(e){return z.push(e)},onKeyDown:T,onFocus:C,onClick:C},a)}))),t?(0,n.cloneElement)(k.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},k.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},8578:function(e,t,a){"use strict";var n=(0,a(7294).createContext)(void 0);t.Z=n},1989:function(e,t,a){"use strict";var n=a(7294),r=a(2263);t.Z=function(e){var t=e.className,a=e.py,l=e.scala,o=e.sourceLink,s=(0,r.Z)().siteConfig.customFields.version,u="https://mmlspark.blob.core.windows.net/docs/"+s+"/pyspark/"+a,c="https://mmlspark.blob.core.windows.net/docs/"+s+"/scala/"+l;return n.createElement("table",null,n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,n.createElement("strong",null,"Python API: "),n.createElement("a",{href:u},t)),n.createElement("td",null,n.createElement("strong",null,"Scala API: "),n.createElement("a",{href:c},t)),n.createElement("td",null,n.createElement("strong",null,"Source: "),n.createElement("a",{href:o},t)))))}},4861:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},contentTitle:function(){return m},metadata:function(){return p},toc:function(){return f},default:function(){return y}});var n=a(2122),r=a(9756),l=(a(7294),a(3905)),o=a(5386),s=a(1332),u=a(1989),c=["components"],i={},m=void 0,p={unversionedId:"documentation/estimators/core/_Featurize",id:"documentation/estimators/core/_Featurize",isDocsHomePage:!1,title:"_Featurize",description:"\x3c!--",source:"@site/docs/documentation/estimators/core/_Featurize.md",sourceDirName:"documentation/estimators/core",slug:"/documentation/estimators/core/_Featurize",permalink:"/SynapseML/docs/next/documentation/estimators/core/_Featurize",version:"current",frontMatter:{}},f=[{value:"Featurize",id:"featurize",children:[{value:"CleanMissingData",id:"cleanmissingdata",children:[]},{value:"CountSelector",id:"countselector",children:[]},{value:"Featurize",id:"featurize-1",children:[]},{value:"ValueIndexer",id:"valueindexer",children:[]}]},{value:"Featurize Text",id:"featurize-text",children:[{value:"TextFeaturizer",id:"textfeaturizer",children:[]}]}],d={toc:f};function y(e){var t=e.components,a=(0,r.Z)(e,c);return(0,l.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"featurize"},"Featurize"),(0,l.kt)("h3",{id:"cleanmissingdata"},"CleanMissingData"),(0,l.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndataset = spark.createDataFrame([\n    (0,    2,    0.50, 0.60, 0),\n    (1,    3,    0.40, None, None),\n    (0,    4,    0.78, 0.99, 2),\n    (1,    5,    0.12, 0.34, 3),\n    (0,    1,    0.50, 0.60, 0),\n    (None, None, None, None, None),\n    (0,    3,    0.78, 0.99, 2),\n    (1,    4,    0.12, 0.34, 3),\n    (0,    None, 0.50, 0.60, 0),\n    (1,    2,    0.40, 0.50, None),\n    (0,    3,    None, 0.99, 2),\n    (1,    4,    0.12, 0.34, 3)\n], ["col1", "col2", "col3", "col4", "col5"])\n\ncmd = (CleanMissingData()\n      .setInputCols(dataset.columns)\n      .setOutputCols(dataset.columns)\n      .setCleaningMode("Mean"))\n'))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport java.lang.{Boolean => JBoolean, Double => JDouble, Integer => JInt}\nimport spark.implicits._\n\ndef createMockDataset: DataFrame = {\n    Seq[(JInt, JInt, JDouble, JDouble, JInt)](\n      (0,    2,    0.50, 0.60, 0),\n      (1,    3,    0.40, null, null),\n      (0,    4,    0.78, 0.99, 2),\n      (1,    5,    0.12, 0.34, 3),\n      (0,    1,    0.50, 0.60, 0),\n      (null, null, null, null, null),\n      (0,    3,    0.78, 0.99, 2),\n      (1,    4,    0.12, 0.34, 3),\n      (0,    null, 0.50, 0.60, 0),\n      (1,    2,    0.40, 0.50, null),\n      (0,    3,    null, 0.99, 2),\n      (1,    4,    0.12, 0.34, 3))\n      .toDF("col1", "col2", "col3", "col4", "col5")\n  }\n\nval dataset = createMockDataset\nval cmd = (new CleanMissingData()\n      .setInputCols(dataset.columns)\n      .setOutputCols(dataset.columns)\n      .setCleaningMode("Mean"))\n')))),(0,l.kt)(u.Z,{className:"CleanMissingData",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.CleanMissingData",scala:"com/microsoft/azure/synapse/ml/featurize/CleanMissingData.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/CleanMissingData.scala",mdxType:"DocTable"}),(0,l.kt)("h3",{id:"countselector"},"CountSelector"),(0,l.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\nfrom pyspark.ml.linalg import Vectors\n\ndf = spark.createDataFrame([\n    (Vectors.sparse(3, [(0, 1.0), (2, 2.0)]), Vectors.dense(1.0, 0.1, 0)),\n    (Vectors.sparse(3, [(0, 1.0), (2, 2.0)]), Vectors.dense(1.0, 0.1, 0))\n], ["col1", "col2"])\n\ncs = CountSelector().setInputCol("col1").setOutputCol("col3")\n\ndisplay(cs.fit(df).transform(df))\n'))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport org.apache.spark.ml.linalg.Vectors\nimport spark.implicits._\n\nval df = Seq(\n    (Vectors.sparse(3, Seq((0, 1.0), (2, 2.0))), Vectors.dense(1.0, 0.1, 0)),\n    (Vectors.sparse(3, Seq((0, 1.0), (2, 2.0))), Vectors.dense(1.0, 0.1, 0))\n  ).toDF("col1", "col2")\n\nval cs = (new CountSelector()\n            .setInputCol("col1")\n            .setOutputCol("col3"))\n\ndisplay(cs.fit(df).transform(df))\n')))),(0,l.kt)(u.Z,{className:"CountSelector",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.CountSelector",scala:"com/microsoft/azure/synapse/ml/featurize/CountSelector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/CountSelector.scala",mdxType:"DocTable"}),(0,l.kt)("h3",{id:"featurize-1"},"Featurize"),(0,l.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndataset = spark.createDataFrame([\n    (0, 2, 0.50, 0.60, "pokemon are everywhere"),\n    (1, 3, 0.40, 0.50, "they are in the woods"),\n    (0, 4, 0.78, 0.99, "they are in the water"),\n    (1, 5, 0.12, 0.34, "they are in the fields"),\n    (0, 3, 0.78, 0.99, "pokemon - gotta catch em all")\n], ["Label", "col1", "col2", "col3"])\n\nfeatureColumns = filter(lambda x: x != "Label", dataset.columns)\n\nfeat = (Featurize()\n      .setNumFeatures(10)\n      .setOutputCol("testColumn")\n      .setInputCols(list(featureColumns))\n      .setOneHotEncodeCategoricals(False))\n\ndisplay(feat.fit(dataset).transform(dataset))\n'))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval dataset = Seq(\n      (0, 2, 0.50, 0.60, "pokemon are everywhere"),\n      (1, 3, 0.40, 0.50, "they are in the woods"),\n      (0, 4, 0.78, 0.99, "they are in the water"),\n      (1, 5, 0.12, 0.34, "they are in the fields"),\n      (0, 3, 0.78, 0.99, "pokemon - gotta catch em all")).toDF("Label", "col1", "col2", "col3")\n\nval featureColumns = dataset.columns.filter(_ != "Label")\n\nval feat = (new Featurize()\n      .setNumFeatures(10)\n      .setOutputCol("testColumn")\n      .setInputCols(featureColumns)\n      .setOneHotEncodeCategoricals(false))\n\ndisplay(feat.fit(dataset).transform(dataset))\n')))),(0,l.kt)(u.Z,{className:"Featurize",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.Featurize",scala:"com/microsoft/azure/synapse/ml/featurize/Featurize.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/Featurize.scala",mdxType:"DocTable"}),(0,l.kt)("h3",{id:"valueindexer"},"ValueIndexer"),(0,l.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize import *\n\ndf = spark.createDataFrame([\n    (-3, 24, 0.32534, True, "piano"),\n    (1, 5, 5.67, False, "piano"),\n    (-3, 5, 0.32534, False, "guitar")\n], ["int", "long", "double", "bool", "string"])\n\nvi = ValueIndexer().setInputCol("string").setOutputCol("string_cat")\n\ndisplay(vi.fit(df).transform(df))\n'))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize._\nimport spark.implicits._\n\nval df = Seq[(Int, Long, Double, Boolean, String)](\n    (-3, 24L, 0.32534, true, "piano"),\n    (1, 5L, 5.67, false, "piano"),\n    (-3, 5L, 0.32534, false, "guitar")).toDF("int", "long", "double", "bool", "string")\n\nval vi = new ValueIndexer().setInputCol("string").setOutputCol("string_cat")\n\ndisplay(vi.fit(df).transform(df))\n')))),(0,l.kt)(u.Z,{className:"ValueIndexer",py:"synapse.ml.featurize.html#module-synapse.ml.featurize.ValueIndexer",scala:"com/microsoft/azure/synapse/ml/featurize/ValueIndexer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/ValueIndexer.scala",mdxType:"DocTable"}),(0,l.kt)("h2",{id:"featurize-text"},"Featurize Text"),(0,l.kt)("h3",{id:"textfeaturizer"},"TextFeaturizer"),(0,l.kt)(o.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,l.kt)(s.Z,{value:"py",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.featurize.text import *\n\ndfRaw = spark.createDataFrame([\n    (0, "Hi I"),\n    (1, "I wish for snow today"),\n    (2, "we Cant go to the park, because of the snow!"),\n    (3, "")\n], ["label", "sentence"])\n\ntfRaw = (TextFeaturizer()\n      .setInputCol("sentence")\n      .setOutputCol("features")\n      .setNumFeatures(20))\n\ndisplay(tfRaw.fit(dfRaw).transform(dfRaw))\n'))),(0,l.kt)(s.Z,{value:"scala",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.featurize.text._\nimport spark.implicits._\n\nval dfRaw = Seq((0, "Hi I"),\n            (1, "I wish for snow today"),\n            (2, "we Cant go to the park, because of the snow!"),\n            (3, "")).toDF("label", "sentence")\n\nval tfRaw = (new TextFeaturizer()\n      .setInputCol("sentence")\n      .setOutputCol("features")\n      .setNumFeatures(20))\n\ndisplay(tfRaw.fit(dfRaw).transform(dfRaw))\n')))),(0,l.kt)(u.Z,{className:"TextFeaturizer",py:"synapse.ml.featurize.text.html#module-synapse.ml.featurize.text.TextFeaturizer",scala:"com/microsoft/azure/synapse/ml/featurize/text/TextFeaturizer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/featurize/text/TextFeaturizer.scala",mdxType:"DocTable"}))}y.isMDXComponent=!0},6010:function(e,t,a){"use strict";function n(e){var t,a,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(r&&(r+=" "),r+=a);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,a=0,r="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(r&&(r+=" "),r+=t);return r}a.d(t,{Z:function(){return r}})}}]);