(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[3257],{3905:function(e,n,r){"use strict";r.d(n,{Zo:function(){return c},kt:function(){return f}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},u=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||i;return r?t.createElement(d,l(l({ref:n},c),{},{components:r})):t.createElement(d,l({ref:n},c))}));function f(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=u;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var p=2;p<i;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}u.displayName="MDXCreateElement"},7737:function(e,n,r){"use strict";r.r(n),r.d(n,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return c},default:function(){return u}});var t=r(2122),a=r(9756),i=(r(7294),r(3905)),l=["components"],o={title:"DeepLearning - Transfer Learning",hide_title:!0,status:"stable",name:"DeepLearning - Transfer Learning"},s=void 0,p={unversionedId:"examples/deep_learning/DeepLearning - Transfer Learning",id:"examples/deep_learning/DeepLearning - Transfer Learning",isDocsHomePage:!1,title:"DeepLearning - Transfer Learning",description:"DeepLearning - Transfer Learning",source:"@site/docs/examples/deep_learning/DeepLearning - Transfer Learning.md",sourceDirName:"examples/deep_learning",slug:"/examples/deep_learning/DeepLearning - Transfer Learning",permalink:"/SynapseML/docs/next/examples/deep_learning/DeepLearning - Transfer Learning",version:"current",frontMatter:{title:"DeepLearning - Transfer Learning",hide_title:!0,status:"stable",name:"DeepLearning - Transfer Learning"},sidebar:"docs",previous:{title:"DeepLearning - Flower Image Classification",permalink:"/SynapseML/docs/next/examples/deep_learning/DeepLearning - Flower Image Classification"},next:{title:"Interpretability - Image Explainers",permalink:"/SynapseML/docs/next/examples/model_interpretability/Interpretability - Image Explainers"}},c=[{value:"DeepLearning - Transfer Learning",id:"deeplearning---transfer-learning",children:[]}],m={toc:c};function u(e){var n=e.components,r=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,t.Z)({},m,r,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"deeplearning---transfer-learning"},"DeepLearning - Transfer Learning"),(0,i.kt)("p",null,"Classify automobile vs airplane using DNN featurization and transfer learning\nagainst a subset of images from CIFAR-10 dataset."),(0,i.kt)("p",null,"Load DNN Model and pick one of the inner layers as feature output"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cntk import CNTKModel\nfrom synapse.ml.downloader import ModelDownloader\nimport numpy as np, os, urllib, tarfile, pickle, array\nfrom os.path import abspath\nfrom pyspark.sql.functions import col, udf\nfrom pyspark.sql.types import *\nmodelName = "ConvNet"\nmodelDir = "file:" + abspath("models")\nd = ModelDownloader(spark, modelDir)\nmodel = d.downloadByName(modelName)\nprint(model.layerNames)\ncntkModel = CNTKModel().setInputCol("images").setOutputCol("features") \\\n                       .setModelLocation(model.uri).setOutputNode("l8")\n')),(0,i.kt)("p",null,"Format raw CIFAR data into correct shape."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'imagesWithLabels = spark.read.parquet("wasbs://publicwasb@mmlspark.blob.core.windows.net/CIFAR10_test.parquet")\n')),(0,i.kt)("p",null,"Select airplanes (label=0) and automobiles (label=1)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'imagesWithLabels = imagesWithLabels.filter("labels<2")\nimagesWithLabels.cache()\n')),(0,i.kt)("p",null,"Featurize images"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'featurizedImages = cntkModel.transform(imagesWithLabels).select(["features","labels"])\n')),(0,i.kt)("p",null,"Use featurized images to train a classifier"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import TrainClassifier\nfrom pyspark.ml.classification import RandomForestClassifier\n\ntrain,test = featurizedImages.randomSplit([0.75,0.25])\n\nmodel = TrainClassifier(model=RandomForestClassifier(),labelCol="labels").fit(train)\n')),(0,i.kt)("p",null,"Evaluate the accuracy of the model"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import ComputeModelStatistics\npredictions = model.transform(test)\nmetrics = ComputeModelStatistics(evaluationMetric="accuracy").transform(predictions)\nmetrics.show()\n')))}u.isMDXComponent=!0}}]);