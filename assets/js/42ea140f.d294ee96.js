(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[8322,1057,4405,1523,2193,4207,4058,9024,697,6281],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),p=c(n),d=s,y=p["".concat(l,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(y,r(r({ref:t},m),{},{components:n})):a.createElement(y,r({ref:t},m))}));function d(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=n.length,r=new Array(o);r[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:s,r[1]=i;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1332:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:s},t)}},5386:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7294),s=n(8578);var o=function(){var e=(0,a.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},r=n(6010),i="tabItem_2kG2",l="tabItemActive_3NDg";var c=37,m=39;var u=function(e){var t=e.lazy,n=e.block,s=e.defaultValue,u=e.values,p=e.groupId,d=e.className,y=o(),g=y.tabGroupChoices,v=y.setTabGroupChoices,f=(0,a.useState)(s),k=f[0],b=f[1],T=a.Children.toArray(e.children),h=[];if(null!=p){var I=g[p];null!=I&&I!==k&&u.some((function(e){return e.value===I}))&&b(I)}var S=function(e){var t=e.currentTarget,n=h.indexOf(t),a=u[n].value;b(a),null!=p&&(v(p,a),setTimeout((function(){var e,n,a,s,o,r,i,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,s=e.bottom,o=e.right,r=window,i=r.innerHeight,c=r.innerWidth,n>=0&&o<=c&&s<=i&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(l),setTimeout((function(){return t.classList.remove(l)}),2e3))}),150))},x=function(e){var t,n;switch(e.keyCode){case m:var a=h.indexOf(e.target)+1;n=h[a]||h[0];break;case c:var s=h.indexOf(e.target)-1;n=h[s]||h[h.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":n},d)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:k===t?0:-1,"aria-selected":k===t,className:(0,r.Z)("tabs__item",i,{"tabs__item--active":k===t}),key:t,ref:function(e){return h.push(e)},onKeyDown:x,onFocus:S,onClick:S},n)}))),t?(0,a.cloneElement)(T.filter((function(e){return e.props.value===k}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},T.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==k})}))))}},8578:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1989:function(e,t,n){"use strict";var a=n(7294),s=n(2263);t.Z=function(e){var t=e.className,n=e.py,o=e.scala,r=e.sourceLink,i=(0,s.Z)().siteConfig.customFields.version,l="https://mmlspark.blob.core.windows.net/docs/"+i+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+i+"/scala/"+o;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:l},t)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:c},t)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:r},t)))))}},7616:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_AnomalyDetection",id:"documentation/transformers/cognitive/_AnomalyDetection",isDocsHomePage:!1,title:"_AnomalyDetection",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_AnomalyDetection.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_AnomalyDetection",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_AnomalyDetection",version:"current",frontMatter:{}},d=[{value:"Anomaly Detection",id:"anomaly-detection",children:[{value:"DetectLastAnomaly",id:"detectlastanomaly",children:[]},{value:"DetectAnomalies",id:"detectanomalies",children:[]},{value:"SimpleDetectAnomalies",id:"simpledetectanomalies",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"anomaly-detection"},"Anomaly Detection"),(0,o.kt)("h3",{id:"detectlastanomaly"},"DetectLastAnomaly"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n], ["timestamp", "value"])\n      .withColumn("group", lit(1))\n      .withColumn("inputs", struct(col("timestamp"), col("value")))\n      .groupBy(col("group"))\n      .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\ndla = (DetectLastAnomaly()\n      .setSubscriptionKey(anomalyKey)\n      .setLocation("westus2")\n      .setOutputCol("anomalies")\n      .setSeriesCol("inputs")\n      .setGranularity("monthly")\n      .setErrorCol("errors"))\n\ndisplay(dla.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, collect_list, lit, sort_array, struct}\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval df = (Seq(\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n  ).toDF("timestamp","value")\n    .withColumn("group", lit(1))\n    .withColumn("inputs", struct(col("timestamp"), col("value")))\n    .groupBy(col("group"))\n    .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nval dla = (new DetectLastAnomaly()\n            .setSubscriptionKey(anomalyKey)\n            .setLocation("westus2")\n            .setOutputCol("anomalies")\n            .setSeriesCol("inputs")\n            .setGranularity("monthly")\n            .setErrorCol("errors"))\n\ndisplay(dla.transform(df))\n')))),(0,o.kt)(l.Z,{className:"DetectLastAnomaly",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.DetectLastAnomaly",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectLastAnomaly.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"detectanomalies"},"DetectAnomalies"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n], ["timestamp", "value"])\n      .withColumn("group", lit(1))\n      .withColumn("inputs", struct(col("timestamp"), col("value")))\n      .groupBy(col("group"))\n      .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nda = (DetectAnomalies()\n      .setSubscriptionKey(anomalyKey)\n      .setLocation("westus2")\n      .setOutputCol("anomalies")\n      .setSeriesCol("inputs")\n      .setGranularity("monthly"))\n\ndisplay(da.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval df = (Seq(\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 90000.0)\n  ).toDF("timestamp","value")\n    .withColumn("group", lit(1))\n    .withColumn("inputs", struct(col("timestamp"), col("value")))\n    .groupBy(col("group"))\n    .agg(sort_array(collect_list(col("inputs"))).alias("inputs")))\n\nval da = (new DetectAnomalies()\n            .setSubscriptionKey(anomalyKey)\n            .setLocation("westus2")\n            .setOutputCol("anomalies")\n            .setSeriesCol("inputs")\n            .setGranularity("monthly"))\n\ndisplay(da.transform(df))\n')))),(0,o.kt)(l.Z,{className:"DetectAnomalies",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DetectAnomalies",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectAnomalies.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"simpledetectanomalies"},"SimpleDetectAnomalies"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nanomalyKey = os.environ.get("ANOMALY_API_KEY", getSecret("anomaly-api-key"))\ndf = (spark.createDataFrame([\n    ("1972-01-01T00:00:00Z", 826.0, 1.0),\n    ("1972-02-01T00:00:00Z", 799.0, 1.0),\n    ("1972-03-01T00:00:00Z", 890.0, 1.0),\n    ("1972-04-01T00:00:00Z", 900.0, 1.0),\n    ("1972-05-01T00:00:00Z", 766.0, 1.0),\n    ("1972-06-01T00:00:00Z", 805.0, 1.0),\n    ("1972-07-01T00:00:00Z", 821.0, 1.0),\n    ("1972-08-01T00:00:00Z", 20000.0, 1.0),\n    ("1972-09-01T00:00:00Z", 883.0, 1.0),\n    ("1972-10-01T00:00:00Z", 898.0, 1.0),\n    ("1972-11-01T00:00:00Z", 957.0, 1.0),\n    ("1972-12-01T00:00:00Z", 924.0, 1.0),\n    ("1973-01-01T00:00:00Z", 881.0, 1.0),\n    ("1973-02-01T00:00:00Z", 837.0, 1.0),\n    ("1973-03-01T00:00:00Z", 90000.0, 1.0),\n    ("1972-01-01T00:00:00Z", 826.0, 2.0),\n    ("1972-02-01T00:00:00Z", 799.0, 2.0),\n    ("1972-03-01T00:00:00Z", 890.0, 2.0),\n    ("1972-04-01T00:00:00Z", 900.0, 2.0),\n    ("1972-05-01T00:00:00Z", 766.0, 2.0),\n    ("1972-06-01T00:00:00Z", 805.0, 2.0),\n    ("1972-07-01T00:00:00Z", 821.0, 2.0),\n    ("1972-08-01T00:00:00Z", 20000.0, 2.0),\n    ("1972-09-01T00:00:00Z", 883.0, 2.0),\n    ("1972-10-01T00:00:00Z", 898.0, 2.0),\n    ("1972-11-01T00:00:00Z", 957.0, 2.0),\n    ("1972-12-01T00:00:00Z", 924.0, 2.0),\n    ("1973-01-01T00:00:00Z", 881.0, 2.0),\n    ("1973-02-01T00:00:00Z", 837.0, 2.0),\n    ("1973-03-01T00:00:00Z", 90000.0, 2.0)\n], ["timestamp", "value", "group"])\n\nsda = (SimpleDetectAnomalies()\n      .setSubscriptionKey(anomalyKey)\n      .setLocation("westus2")\n      .setOutputCol("anomalies")\n      .setSeriesCol("inputs")\n      .setGranularity("monthly"))\n\ndisplay(sda.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval anomalyKey = sys.env.getOrElse("ANOMALY_API_KEY", None)\nval baseSeq = Seq(\n    ("1972-01-01T00:00:00Z", 826.0),\n    ("1972-02-01T00:00:00Z", 799.0),\n    ("1972-03-01T00:00:00Z", 890.0),\n    ("1972-04-01T00:00:00Z", 900.0),\n    ("1972-05-01T00:00:00Z", 766.0),\n    ("1972-06-01T00:00:00Z", 805.0),\n    ("1972-07-01T00:00:00Z", 821.0),\n    ("1972-08-01T00:00:00Z", 20000.0),\n    ("1972-09-01T00:00:00Z", 883.0),\n    ("1972-10-01T00:00:00Z", 898.0),\n    ("1972-11-01T00:00:00Z", 957.0),\n    ("1972-12-01T00:00:00Z", 924.0),\n    ("1973-01-01T00:00:00Z", 881.0),\n    ("1973-02-01T00:00:00Z", 837.0),\n    ("1973-03-01T00:00:00Z", 9000.0)\n  )\nval df = (baseSeq.map(p => (p._1,p._2,1.0))\n    .++(baseSeq.map(p => (p._1,p._2,2.0)))\n    .toDF("timestamp","value","group"))\n\nval sda = (new SimpleDetectAnomalies()\n            .setSubscriptionKey(anomalyKey)\n            .setLocation("westus2")\n            .setOutputCol("anomalies")\n            .setGroupbyCol("group")\n            .setGranularity("monthly"))\n\ndisplay(sda.transform(df))\n')))),(0,o.kt)(l.Z,{className:"SimpleDetectAnomalies",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.SimpleDetectAnomalies",scala:"com/microsoft/azure/synapse/ml/cognitive/SimpleDetectAnomalies.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AnomalyDetection.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},4955:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_AzureSearch",id:"documentation/transformers/cognitive/_AzureSearch",isDocsHomePage:!1,title:"_AzureSearch",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_AzureSearch.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_AzureSearch",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_AzureSearch",version:"current",frontMatter:{}},d=[{value:"Azure Search",id:"azure-search",children:[{value:"AzureSearch",id:"azuresearch",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"azure-search"},"Azure Search"),(0,o.kt)("h3",{id:"azuresearch"},"AzureSearch"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nazureSearchKey = os.environ.get("AZURE_SEARCH_KEY", getSecret("azure-search-key"))\ntestServiceName = "mmlspark-azure-search"\n\nindexName = "test-website"\n\ndef createSimpleIndexJson(indexName):\n    json_str = """\n       {\n           "name": "%s",\n           "fields": [\n               {\n                   "name": "id",\n                   "type": "Edm.String",\n                   "key": true,\n                   "facetable": false\n                },\n                {\n                    "name": "fileName",\n                    "type": "Edm.String",\n                    "searchable": false,\n                    "sortable": false,\n                    "facetable": false\n                },\n                {\n                    "name": "text",\n                    "type": "Edm.String",\n                    "filterable": false,\n                    "sortable": false,\n                    "facetable": false\n                }\n            ]\n        }\n    """\n\n    return json_str % indexName\n\ndf = (spark.createDataFrame([\n    ("upload", "0", "file0", "text0"),\n    ("upload", "1", "file1", "text1"),\n    ("upload", "2", "file2", "text2"),\n    ("upload", "3", "file3", "text3")\n], ["searchAction", "id", "fileName", "text"]))\n\nad = (AddDocuments()\n      .setSubscriptionKey(azureSearchKey)\n      .setServiceName(testServiceName)\n      .setOutputCol("out")\n      .setErrorCol("err")\n      .setIndexName(indexName)\n      .setActionCol("searchAction"))\n\ndisplay(ad.transform(df))\n\nAzureSearchWriter.writeToAzureSearch(df,\n    subscriptionKey=azureSearchKey,\n    actionCol="searchAction",\n    serviceName=testServiceName,\n    indexJson=createSimpleIndexJson(indexName))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval azureSearchKey = sys.env.getOrElse("AZURE_SEARCH_KEY", None)\nval testServiceName = "mmlspark-azure-search"\n\nval indexName = "test-website"\n\ndef createSimpleIndexJson(indexName: String) = {\n    s"""\n       |{\n       |    "name": "$indexName",\n       |    "fields": [\n       |      {\n       |        "name": "id",\n       |        "type": "Edm.String",\n       |        "key": true,\n       |        "facetable": false\n       |      },\n       |    {\n       |      "name": "fileName",\n       |      "type": "Edm.String",\n       |      "searchable": false,\n       |      "sortable": false,\n       |      "facetable": false\n       |    },\n       |    {\n       |      "name": "text",\n       |      "type": "Edm.String",\n       |      "filterable": false,\n       |      "sortable": false,\n       |      "facetable": false\n       |    }\n       |    ]\n       |  }\n    """.stripMargin\n}\n\nval df = ((0 until 4)\n      .map(i => ("upload", s"$i", s"file$i", s"text$i"))\n      .toDF("searchAction", "id", "fileName", "text"))\n\nval ad = (new AddDocuments()\n      .setSubscriptionKey(azureSearchKey)\n      .setServiceName(testServiceName)\n      .setOutputCol("out")\n      .setErrorCol("err")\n      .setIndexName(indexName)\n      .setActionCol("searchAction"))\n\ndisplay(ad.transform(df))\n\nAzureSearchWriter.write(df,\n      Map("subscriptionKey" -> azureSearchKey,\n        "actionCol" -> "searchAction",\n        "serviceName" -> testServiceName,\n        "indexJson" -> createSimpleIndexJson(indexName)))\n')))),(0,o.kt)(l.Z,{className:"AzureSearch",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AzureSearch",scala:"com/microsoft/azure/synapse/ml/cognitive/AzureSearch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AzureSearch.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},1983:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_BingImageSearch",id:"documentation/transformers/cognitive/_BingImageSearch",isDocsHomePage:!1,title:"_BingImageSearch",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_BingImageSearch.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_BingImageSearch",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_BingImageSearch",version:"current",frontMatter:{}},d=[{value:"Bing Image Search",id:"bing-image-search",children:[{value:"BingImageSearch",id:"bingimagesearch",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"bing-image-search"},"Bing Image Search"),(0,o.kt)("h3",{id:"bingimagesearch"},"BingImageSearch"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nbingSearchKey = os.environ.get("BING_SEARCH_KEY", getSecret("bing-search-key"))\n\n# Number of images Bing will return per query\nimgsPerBatch = 10\n# A list of offsets, used to page into the search results\noffsets = [(i*imgsPerBatch,) for i in range(100)]\n# Since web content is our data, we create a dataframe with options on that data: offsets\nbingParameters = spark.createDataFrame(offsets, ["offset"])\n\n# Run the Bing Image Search service with our text query\nbingSearch = (BingImageSearch()\n              .setSubscriptionKey(bingSearchKey)\n              .setOffsetCol("offset")\n              .setQuery("Martin Luther King Jr. quotes")\n              .setCount(imgsPerBatch)\n              .setOutputCol("images"))\n\n# Transformer that extracts and flattens the richly structured output of Bing Image Search into a simple URL column\ngetUrls = BingImageSearch.getUrlTransformer("images", "url")\n\n# This displays the full results returned\ndisplay(bingSearch.transform(bingParameters))\n\n# Since we have two services, they are put into a pipeline\npipeline = PipelineModel(stages=[bingSearch, getUrls])\n\n# Show the results of your search: image URLs\ndisplay(pipeline.transform(bingParameters))\n\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval bingSearchKey = sys.env.getOrElse("BING_SEARCH_KEY", None)\n\n// Number of images Bing will return per query\nval imgsPerBatch = 10\n// A list of offsets, used to page into the search results\nval offsets = (0 until 100).map(i => i*imgsPerBatch)\n// Since web content is our data, we create a dataframe with options on that data: offsets\nval bingParameters = Seq(offsets).toDF("offset")\n\n// Run the Bing Image Search service with our text query\nval bingSearch = (new BingImageSearch()\n              .setSubscriptionKey(bingSearchKey)\n              .setOffsetCol("offset")\n              .setQuery("Martin Luther King Jr. quotes")\n              .setCount(imgsPerBatch)\n              .setOutputCol("images"))\n\n// Transformer that extracts and flattens the richly structured output of Bing Image Search into a simple URL column\nval getUrls = BingImageSearch.getUrlTransformer("images", "url")\n\n// This displays the full results returned\ndisplay(bingSearch.transform(bingParameters))\n\n// Show the results of your search: image URLs\ndisplay(getUrls.transform(bingSearch.transform(bingParameters)))\n')))),(0,o.kt)(l.Z,{className:"BingImageSearch",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.BingImageSearch",scala:"com/microsoft/azure/synapse/ml/cognitive/BingImageSearch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/BingImageSearch.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},3440:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_ComputerVision",id:"documentation/transformers/cognitive/_ComputerVision",isDocsHomePage:!1,title:"_ComputerVision",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_ComputerVision.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_ComputerVision",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_ComputerVision",version:"current",frontMatter:{}},d=[{value:"Computer Vision",id:"computer-vision",children:[{value:"OCR",id:"ocr",children:[]},{value:"AnalyzeImage",id:"analyzeimage",children:[]},{value:"RecognizeText",id:"recognizetext",children:[]},{value:"ReadImage",id:"readimage",children:[]},{value:"RecognizeDomainSpecificContent",id:"recognizedomainspecificcontent",children:[]},{value:"GenerateThumbnails",id:"generatethumbnails",children:[]},{value:"TagImage",id:"tagimage",children:[]},{value:"DescribeImage",id:"describeimage",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"computer-vision"},"Computer Vision"),(0,o.kt)("h3",{id:"ocr"},"OCR"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\n\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n    ], ["url", ])\n\nocr = (OCR()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setDetectOrientation(True)\n        .setOutputCol("ocr"))\n\ndisplay(ocr.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg"\n  ).toDF("url")\n\n\nval ocr = (new OCR()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setDetectOrientation(true)\n        .setOutputCol("ocr"))\n\ndisplay(ocr.transform(df))\n')))),(0,o.kt)(l.Z,{className:"OCR",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.OCR",scala:"com/microsoft/azure/synapse/ml/cognitive/OCR.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzeimage"},"AnalyzeImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/objects.jpg", ),\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/dog.jpg", ),\n        ("https://raw.githubusercontent.com/Azure-Samples/cognitive-services-sample-data-files/master/ComputerVision/Images/house.jpg", )\n    ], ["image", ])\n\n\nai = (AnalyzeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setLanguageCol("language")\n        .setVisualFeatures(["Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"])\n        .setDetails(["Celebrities", "Landmarks"])\n        .setOutputCol("features"))\n\ndisplay(ai.transform(df).select("url", "features.description.tags"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", "en"),\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", null),\n    ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", "en")\n  ).toDF("url", "language")\n\nval ai = (new AnalyzeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setLanguageCol("language")\n        .setVisualFeatures(Seq("Categories", "Tags", "Description", "Faces", "ImageType", "Color", "Adult", "Objects", "Brands"))\n        .setDetails(Seq("Celebrities", "Landmarks"))\n        .setOutputCol("features"))\n\ndisplay(ai.transform(df).select("url", "features"))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.AnalyzeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"recognizetext"},"RecognizeText"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nrt = (RecognizeText()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setMode("Printed")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(rt.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n  ).toDF("url")\n\nval rt = (new RecognizeText()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setMode("Printed")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(rt.transform(df))\n')))),(0,o.kt)(l.Z,{className:"RecognizeText",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.RecognizeText",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeText.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"readimage"},"ReadImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png", ),\n        ("https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png", )\n    ], ["url", ])\n\nri = (ReadImage()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("ocr")\n    .setConcurrency(5))\n\ndisplay(ri.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test2.png",\n    "https://mmlspark.blob.core.windows.net/datasets/OCR/test3.png"\n  ).toDF("url")\n\nval ri = (new ReadImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("ocr")\n        .setConcurrency(5))\n\ndisplay(ri.transform(df))\n')))),(0,o.kt)(l.Z,{className:"ReadImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.ReadImage",scala:"com/microsoft/azure/synapse/ml/cognitive/ReadImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"recognizedomainspecificcontent"},"RecognizeDomainSpecificContent"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg", )\n    ], ["url", ])\n\nceleb = (RecognizeDomainSpecificContent()\n        .setSubscriptionKey(cognitiveKey)\n        .setModel("celebrities")\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("celebs"))\n\ndisplay(celeb.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n  ).toDF("url")\n\nval celeb = (new RecognizeDomainSpecificContent()\n                .setSubscriptionKey(cognitiveKey)\n                .setModel("celebrities")\n                .setLocation("eastus")\n                .setImageUrlCol("url")\n                .setOutputCol("celebs"))\n\ndisplay(celeb.transform(df))\n')))),(0,o.kt)(l.Z,{className:"RecognizeDomainSpecificContent",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.RecognizeDomainSpecificContent",scala:"com/microsoft/azure/synapse/ml/cognitive/RecognizeDomainSpecificContent.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"generatethumbnails"},"GenerateThumbnails"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ngt = (GenerateThumbnails()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setHeight(50)\n        .setWidth(50)\n        .setSmartCropping(True)\n        .setImageUrlCol("url")\n        .setOutputCol("thumbnails"))\n\ndisplay(gt.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval gt = (new GenerateThumbnails()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setHeight(50)\n        .setWidth(50)\n        .setSmartCropping(true)\n        .setImageUrlCol("url")\n        .setOutputCol("thumbnails"))\n\ndisplay(gt.transform(df))\n')))),(0,o.kt)(l.Z,{className:"GenerateThumbnails",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GenerateThumbnails",scala:"com/microsoft/azure/synapse/ml/cognitive/GenerateThumbnails.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"tagimage"},"TagImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\nti = (TagImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("tags"))\n\ndisplay(ti.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval ti = (new TagImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setImageUrlCol("url")\n        .setOutputCol("tags"))\n\ndisplay(ti.transform(df))\n')))),(0,o.kt)(l.Z,{className:"TagImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.TagImage",scala:"com/microsoft/azure/synapse/ml/cognitive/TagImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"describeimage"},"DescribeImage"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n        ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg", )\n    ], ["url", ])\n\ndi = (DescribeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setMaxCandidates(3)\n        .setImageUrlCol("url")\n        .setOutputCol("descriptions"))\n\ndisplay(di.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg"\n  ).toDF("url")\n\nval di = (new DescribeImage()\n        .setSubscriptionKey(cognitiveKey)\n        .setLocation("eastus")\n        .setMaxCandidates(3)\n        .setImageUrlCol("url")\n        .setOutputCol("descriptions"))\n\ndisplay(di.transform(df))\n')))),(0,o.kt)(l.Z,{className:"DescribeImage",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DescribeImage",scala:"com/microsoft/azure/synapse/ml/cognitive/DescribeImage.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/ComputerVision.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},2358:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_Face",id:"documentation/transformers/cognitive/_Face",isDocsHomePage:!1,title:"_Face",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_Face.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_Face",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_Face",version:"current",frontMatter:{}},d=[{value:"Face",id:"face",children:[{value:"DetectFace",id:"detectface",children:[]},{value:"FindSimilarFace",id:"findsimilarface",children:[]},{value:"GroupFaces",id:"groupfaces",children:[]},{value:"IdentifyFaces",id:"identifyfaces",children:[]},{value:"VerifyFaces",id:"verifyfaces",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"face"},"Face"),(0,o.kt)("h3",{id:"detectface"},"DetectFace"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n], ["url"])\n\nface = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes(["age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n      "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise"]))\n\ndisplay(face.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n  ).toDF("url")\n\nval face = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("face")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(true)\n    .setReturnFaceAttributes(Seq(\n      "age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n      "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise")))\n\ndisplay(face.transform(df))\n')))),(0,o.kt)(l.Z,{className:"DetectFace",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DetectFace",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"findsimilarface"},"FindSimilarFace"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\nfindSimilar = (FindSimilarFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("similar")\n    .setFaceIdCol("id")\n    .setFaceIds(faceIds))\n\ndisplay(findSimilar.transform(faceIdDF))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n    .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval findSimilar = (new FindSimilarFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("similar")\n    .setFaceIdCol("id")\n    .setFaceIds(faceIds))\n\ndisplay(findSimilar.transform(faceIdDF))\n')))),(0,o.kt)(l.Z,{className:"FindSimilarFace",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.FindSimilarFace",scala:"com/microsoft/azure/synapse/ml/cognitive/FindSimilarFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"groupfaces"},"GroupFaces"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\ngroup = (GroupFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("grouping")\n    .setFaceIds(faceIds))\n\ndisplay(group.transform(faceIdDF))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n    .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval group = (new GroupFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("grouping")\n    .setFaceIds(faceIds))\n\ndisplay(group.transform(faceIdDF))\n')))),(0,o.kt)(l.Z,{className:"GroupFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GroupFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/GroupFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"identifyfaces"},"IdentifyFaces"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\npgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nidentifyFaces = (IdentifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setFaceIdsCol("faces")\n    .setPersonGroupId(pgId)\n    .setOutputCol("identified_faces"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval pgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nval identifyFaces = (new IdentifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setFaceIdsCol("faces")\n    .setPersonGroupId(pgId)\n    .setOutputCol("identified_faces"))\n')))),(0,o.kt)(l.Z,{className:"IdentifyFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.IdentifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/IdentifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"verifyfaces"},"VerifyFaces"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\nfaceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1)[0].asDict()[\'faceId1\']))\n\nverify = (VerifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("same")\n    .setFaceId1Col("faceId1")\n    .setFaceId2Col("faceId2"))\n\ndisplay(verify.transform(faceIdDF2))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\n\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\n    .cache())\nval faceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1).head.getString(0)))\n\nval verify = (new VerifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("same")\n    .setFaceId1Col("faceId1")\n    .setFaceId2Col("faceId2"))\n\ndisplay(verify.transform(faceIdDF2))\n')))),(0,o.kt)(l.Z,{className:"VerifyFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.VerifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/VerifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},8801:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_FormRecognizer",id:"documentation/transformers/cognitive/_FormRecognizer",isDocsHomePage:!1,title:"_FormRecognizer",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_FormRecognizer.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_FormRecognizer",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_FormRecognizer",version:"current",frontMatter:{}},d=[{value:"Form Recognizer",id:"form-recognizer",children:[{value:"AnalyzeLayout",id:"analyzelayout",children:[]},{value:"AnalyzeReceipts",id:"analyzereceipts",children:[]},{value:"AnalyzeBusinessCards",id:"analyzebusinesscards",children:[]},{value:"AnalyzeInvoices",id:"analyzeinvoices",children:[]},{value:"AnalyzeIDDocuments",id:"analyzeiddocuments",children:[]},{value:"AnalyzeCustomModel",id:"analyzecustommodel",children:[]},{value:"GetCustomModel",id:"getcustommodel",children:[]},{value:"ListCustomModels",id:"listcustommodels",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"form-recognizer"},"Form Recognizer"),(0,o.kt)("h3",{id:"analyzelayout"},"AnalyzeLayout"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg",)\n], ["source",])\n\nanalyzeLayout = (AnalyzeLayout()\n            .setSubscriptionKey(cognitiveKey)\n            .setLocation("eastus")\n            .setImageUrlCol("source")\n            .setOutputCol("layout")\n            .setConcurrency(5))\n\ndisplay(analyzeLayout\n        .transform(imageDf)\n        .withColumn("lines", flatten(col("layout.analyzeResult.readResults.lines")))\n        .withColumn("readLayout", col("lines.text"))\n        .withColumn("tables", flatten(col("layout.analyzeResult.pageResults.tables")))\n        .withColumn("cells", flatten(col("tables.cells")))\n        .withColumn("pageLayout", col("cells.text"))\n        .select("source", "readLayout", "pageLayout"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/layout1.jpg"\n  ).toDF("source")\n\nval analyzeLayout = (new AnalyzeLayout()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("layout")\n                        .setConcurrency(5))\n\ndisplay(analyzeLayout.transform(imageDf)\n')))),(0,o.kt)(l.Z,{className:"AnalyzeLayout",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeLayout",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeLayout.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzereceipts"},"AnalyzeReceipts"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",),\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",)\n], ["image",])\n\nanalyzeReceipts = (AnalyzeReceipts()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("receipts")\n                  .setConcurrency(5))\n\ndisplay(analyzeReceipts.transform(imageDf))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png",\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/receipt1.png"\n  ).toDF("source")\n\nval analyzeReceipts = (new AnalyzeReceipts()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("receipts")\n                        .setConcurrency(5))\n\ndisplay(analyzeReceipts.transform(imageDf))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeReceipts",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeReceipts",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeReceipts.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzebusinesscards"},"AnalyzeBusinessCards"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg",)\n], ["source",])\n\nanalyzeBusinessCards = (AnalyzeBusinessCards()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("businessCards")\n                        .setConcurrency(5))\n\ndisplay(analyzeBusinessCards.transform(imageDf)\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/business_card.jpg"\n  ).toDF("source")\n\nval analyzeBusinessCards = (new AnalyzeBusinessCards()\n                              .setSubscriptionKey(cognitiveKey)\n                              .setLocation("eastus")\n                              .setImageUrlCol("source")\n                              .setOutputCol("businessCards")\n                              .setConcurrency(5))\n\ndisplay(analyzeBusinessCards.transform(imageDf)\n')))),(0,o.kt)(l.Z,{className:"AnalyzeBusinessCards",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeBusinessCards",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeBusinessCards.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzeinvoices"},"AnalyzeInvoices"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeInvoices = (AnalyzeInvoices()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("invoices")\n                  .setConcurrency(5))\n\ndisplay(analyzeInvoices\n        .transform(imageDf)\n        .withColumn("documents", explode(col("invoices.analyzeResult.documentResults.fields")))\n        .select("source", "documents"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n  ).toDF("source")\n\nval analyzeInvoices = (new AnalyzeInvoices()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("invoices")\n                        .setConcurrency(5))\n\ndisplay(analyzeInvoices.transform(imageD4))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeInvoices",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeInvoices",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeInvoices.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzeiddocuments"},"AnalyzeIDDocuments"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg",)\n], ["source",])\n\nanalyzeIDDocuments = (AnalyzeIDDocuments()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setImageUrlCol("source")\n                  .setOutputCol("ids")\n                  .setConcurrency(5))\n\ndisplay(analyzeIDDocuments\n        .transform(imageDf)\n        .withColumn("documents", explode(col("ids.analyzeResult.documentResults.fields")))\n        .select("source", "documents"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/id1.jpg"\n  ).toDF("source")\n\nval analyzeIDDocuments = (new AnalyzeIDDocuments()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setImageUrlCol("source")\n                        .setOutputCol("ids")\n                        .setConcurrency(5))\n\ndisplay(analyzeIDDocuments.transform(imageDf))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeIDDocuments",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeIDDocuments",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeIDDocuments.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"analyzecustommodel"},"AnalyzeCustomModel"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nimageDf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png",)\n], ["source",])\n\nanalyzeCustomModel = (AnalyzeCustomModel()\n                 .setSubscriptionKey(cognitiveKey)\n                 .setLocation("eastus")\n                 .setModelId(modelId)\n                 .setImageUrlCol("source")\n                 .setOutputCol("output")\n                 .setConcurrency(5))\n\ndisplay(analyzeCustomModel\n        .transform(imageDf)\n        .withColumn("keyValuePairs", flatten(col("output.analyzeResult.pageResults.keyValuePairs")))\n        .withColumn("keys", col("keyValuePairs.key.text"))\n        .withColumn("values", col("keyValuePairs.value.text"))\n        .withColumn("keyValuePairs", create_map(lit("key"), col("keys"), lit("value"), col("values")))\n        .select("source", "keyValuePairs"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval imageDf = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/FormRecognizer/invoice2.png"\n  ).toDF("source")\n\nval analyzeCustomModel = (new AnalyzeCustomModel()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setModelId(modelId)\n                        .setImageUrlCol("source")\n                        .setOutputCol("output")\n                        .setConcurrency(5))\n\ndisplay(analyzeCustomModel.transform(imageDf))\n')))),(0,o.kt)(l.Z,{className:"AnalyzeCustomModel",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AnalyzeCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/AnalyzeCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"getcustommodel"},"GetCustomModel"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nmodelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" # put your own modelId here\nemptyDf = spark.createDataFrame([("",)])\n\ngetCustomModel = (GetCustomModel()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setModelId(modelId)\n                  .setIncludeKeys(true)\n                  .setOutputCol("model")\n                  .setConcurrency(5))\n\ndisplay(getCustomModel\n        .transform(emptyDf)\n        .withColumn("modelInfo", col("model.ModelInfo"))\n        .withColumn("trainResult", col("model.TrainResult"))\n        .select("modelInfo", "trainResult"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval modelId = "02bc2f58-2beb-4ae3-84fb-08f011b2f7b8" // put your own modelId here\nval emptyDf = Seq("").toDF()\n\nval getCustomModel = (new GetCustomModel()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setModelId(modelId)\n                        .setIncludeKeys(true)\n                        .setOutputCol("model")\n                        .setConcurrency(5))\n\ndisplay(getCustomModel.transform(emptyDf))\n')))),(0,o.kt)(l.Z,{className:"GetCustomModel",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GetCustomModel",scala:"com/microsoft/azure/synapse/ml/cognitive/GetCustomModel.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"listcustommodels"},"ListCustomModels"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nemptyDf = spark.createDataFrame([("",)])\n\nlistCustomModels = (ListCustomModels()\n                  .setSubscriptionKey(cognitiveKey)\n                  .setLocation("eastus")\n                  .setOp("full")\n                  .setOutputCol("models")\n                  .setConcurrency(5))\n\ndisplay(listCustomModels\n       .transform(emptyDf)\n       .withColumn("modelIds", col("models.modelList.modelId"))\n       .select("modelIds"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval emptyDf = Seq("").toDF()\n\nval listCustomModels = (new ListCustomModels()\n                        .setSubscriptionKey(cognitiveKey)\n                        .setLocation("eastus")\n                        .setOp("full")\n                        .setOutputCol("models")\n                        .setConcurrency(5))\n\ndisplay(listCustomModels.transform(emptyDf))\n')))),(0,o.kt)(l.Z,{className:"ListCustomModels",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.ListCustomModels",scala:"com/microsoft/azure/synapse/ml/cognitive/ListCustomModels.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/FormRecognizer.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},8364:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_SpeechToText",id:"documentation/transformers/cognitive/_SpeechToText",isDocsHomePage:!1,title:"_SpeechToText",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_SpeechToText.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_SpeechToText",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_SpeechToText",version:"current",frontMatter:{}},d=[{value:"Speech To Text",id:"speech-to-text",children:[{value:"SpeechToText",id:"speechtotext",children:[]},{value:"SpeechToTextSDK",id:"speechtotextsdk",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"speech-to-text"},"Speech To Text"),(0,o.kt)("h3",{id:"speechtotext"},"SpeechToText"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\nimport requests\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\nlink = "https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav"\naudioBytes = requests.get(link).content\ndf = spark.createDataFrame([(audioBytes,)\n                           ], ["audio"])\n\nstt = (SpeechToText()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("audio")\n    .setLanguage("en-US")\n    .setFormat("simple"))\n\ndisplay(stt.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.commons.compress.utils.IOUtils\nimport java.net.URL\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval audioBytes = IOUtils.toByteArray(new URL("https://mmlspark.blob.core.windows.net/datasets/Speech/test1.wav").openStream())\n\nval df: DataFrame = Seq(\n    Tuple1(audioBytes)\n  ).toDF("audio")\n\nval stt = (new SpeechToText()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("audio")\n    .setLanguage("en-US")\n    .setFormat("simple"))\n\ndisplay(stt.transform(df))\n')))),(0,o.kt)(l.Z,{className:"SpeechToText",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.SpeechToText",scala:"com/microsoft/azure/synapse/ml/cognitive/SpeechToText.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/SpeechToText.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"speechtotextsdk"},"SpeechToTextSDK"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\nimport requests\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([("https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav",)\n                           ], ["url"])\n\nspeech_to_text = (SpeechToTextSDK()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("url")\n    .setLanguage("en-US")\n    .setProfanity("Masked"))\n\ndisplay(speech_to_text.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.commons.compress.utils.IOUtils\nimport java.net.URL\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/Speech/audio2.wav"\n  ).toDF("url")\n\nval speech_to_text = (new SpeechToTextSDK()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("text")\n    .setAudioDataCol("url")\n    .setLanguage("en-US")\n    .setProfanity("Masked"))\n\ndisplay(speech_to_text.transform(df))\n')))),(0,o.kt)(l.Z,{className:"SpeechToTextSDK",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.SpeechToTextSDK",scala:"com/microsoft/azure/synapse/ml/cognitive/SpeechToTextSDK.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/SpeechToTextSDK.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},9308:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_TextAnalytics",id:"documentation/transformers/cognitive/_TextAnalytics",isDocsHomePage:!1,title:"_TextAnalytics",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_TextAnalytics.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_TextAnalytics",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_TextAnalytics",version:"current",frontMatter:{}},d=[{value:"Text Analytics",id:"text-analytics",children:[{value:"EntityDetector",id:"entitydetector",children:[]},{value:"KeyPhraseExtractor",id:"keyphraseextractor",children:[]},{value:"LanguageDetector",id:"languagedetector",children:[]},{value:"NER",id:"ner",children:[]},{value:"PII",id:"pii",children:[]},{value:"TextSentiment",id:"textsentiment",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"text-analytics"},"Text Analytics"),(0,o.kt)("h3",{id:"entitydetector"},"EntityDetector"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "Microsoft released Windows 10"),\n    ("2", "In 1975, Bill Gates III and Paul Allen founded the company.")\n], ["id", "text"])\n\nentity = (EntityDetector()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguage("en")\n      .setOutputCol("replies")\n      .setErrorCol("error"))\n\ndisplay(entity.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("1", "Microsoft released Windows 10"),\n    ("2", "In 1975, Bill Gates III and Paul Allen founded the company.")\n  ).toDF("id", "text")\n\nval entity = (new EntityDetector()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguage("en")\n            .setOutputCol("replies"))\n\ndisplay(entity.transform(df))\n')))),(0,o.kt)(l.Z,{className:"EntityDetector",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.EntityDetector",scala:"com/microsoft/azure/synapse/ml/cognitive/EntityDetector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"keyphraseextractor"},"KeyPhraseExtractor"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("en", "Hello world. This is some input text that I love."),\n    ("fr", "Bonjour tout le monde"),\n    ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.")\n], ["lang", "text"])\n\nkeyPhrase = (KeyPhraseExtractor()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguageCol("lang")\n            .setOutputCol("replies")\n            .setErrorCol("error"))\n\ndisplay(keyPhrase.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("en", "Hello world. This is some input text that I love."),\n    ("fr", "Bonjour tout le monde"),\n    ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer."),\n    ("en", null)\n  ).toDF("lang", "text")\n\nval keyPhrase = (new KeyPhraseExtractor()\n                  .setSubscriptionKey(textKey)\n                  .setLocation("eastus")\n                  .setLanguageCol("lang")\n                  .setOutputCol("replies"))\n\ndisplay(keyPhrase.transform(df))\n')))),(0,o.kt)(l.Z,{className:"KeyPhraseExtractor",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.KeyPhraseExtractor",scala:"com/microsoft/azure/synapse/ml/cognitive/KeyPhraseExtractor.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"languagedetector"},"LanguageDetector"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("Hello World",),\n  ("Bonjour tout le monde",),\n  ("La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.",),\n  ("\u4f60\u597d",),\n  ("\u3053\u3093\u306b\u3061\u306f",),\n  (":) :( :D",)\n], ["text",])\n\nlanguage = (LanguageDetector()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("language")\n            .setErrorCol("error"))\n\ndisplay(language.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    "Hello World",\n    "Bonjour tout le monde",\n    "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer.",\n    ":) :( :D"\n  ).toDF("text")\n\nval language = (new LanguageDetector()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setOutputCol("replies"))\n\ndisplay(language.transform(df))\n')))),(0,o.kt)(l.Z,{className:"LanguageDetector",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.LanguageDetector",scala:"com/microsoft/azure/synapse/ml/cognitive/LanguageDetector.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"ner"},"NER"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "en", "I had a wonderful trip to Seattle last week."),\n    ("2", "en", "I visited Space Needle 2 times.")\n], ["id", "language", "text"])\n\nner = (NER()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguageCol("language")\n      .setOutputCol("replies")\n      .setErrorCol("error"))\n\ndisplay(ner.transform(df)\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("1", "en", "I had a wonderful trip to Seattle last week."),\n    ("2", "en", "I visited Space Needle 2 times.")\n  ).toDF("id", "language", "text")\n\nval ner = (new NER()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguage("en")\n            .setOutputCol("response"))\n\ndisplay(ner.transform(df)\n')))),(0,o.kt)(l.Z,{className:"NER",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.NER",scala:"com/microsoft/azure/synapse/ml/cognitive/NER.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"pii"},"PII"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n    ("1", "en", "My SSN is 859-98-0987"),\n    ("2", "en",\n      "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check."),\n    ("3", "en", "Is 998.214.865-68 your Brazilian CPF number?")\n], ["id", "language", "text"])\n\npii = (PII()\n      .setSubscriptionKey(textKey)\n      .setLocation("eastus")\n      .setLanguage("en")\n      .setOutputCol("response")\n\ndisplay(pii.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("1", "en", "My SSN is 859-98-0987"),\n    ("2", "en",\n      "Your ABA number - 111000025 - is the first 9 digits in the lower left hand corner of your personal check."),\n    ("3", "en", "Is 998.214.865-68 your Brazilian CPF number?")\n  ).toDF("id", "language", "text")\n\nval pii = (new PII()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguage("en")\n            .setOutputCol("response"))\n\ndisplay(pii.transform(df))\n')))),(0,o.kt)(l.Z,{className:"PII",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.TextSentiment",scala:"com/microsoft/azure/synapse/ml/cognitive/TextSentiment.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"textsentiment"},"TextSentiment"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntextKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("I am so happy today, its sunny!", "en-US"),\n  ("I am frustrated by this rush hour traffic", "en-US"),\n  ("The cognitive services on spark aint bad", "en-US"),\n], ["text", "language"])\n\nsentiment = (TextSentiment()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("sentiment")\n            .setErrorCol("error")\n            .setLanguageCol("language"))\n\ndisplay(sentiment.transform(df))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval textKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df = Seq(\n    ("en", "Hello world. This is some input text that I love."),\n    ("fr", "Bonjour tout le monde"),\n    ("es", "La carretera estaba atascada. Hab\xeda mucho tr\xe1fico el d\xeda de ayer."),\n    (null, "ich bin ein berliner"),\n    (null, null),\n    ("en", null)\n  ).toDF("lang", "text")\n\nval sentiment = (new TextSentiment()\n            .setSubscriptionKey(textKey)\n            .setLocation("eastus")\n            .setLanguageCol("lang")\n            .setModelVersion("latest")\n            .setShowStats(true)\n            .setOutputCol("replies"))\n\ndisplay(sentiment.transform(df))\n')))),(0,o.kt)(l.Z,{className:"TextSentiment",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.TextSentiment",scala:"com/microsoft/azure/synapse/ml/cognitive/TextSentiment.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextAnalytics.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},4522:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return g}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(5386),i=n(1332),l=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/cognitive/_Translator",id:"documentation/transformers/cognitive/_Translator",isDocsHomePage:!1,title:"_Translator",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_Translator.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_Translator",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_Translator",version:"current",frontMatter:{}},d=[{value:"Translator",id:"translator",children:[{value:"Translate",id:"translate",children:[]},{value:"Transliterate",id:"transliterate",children:[]},{value:"Detect",id:"detect",children:[]},{value:"BreakSentence",id:"breaksentence",children:[]},{value:"DictionaryLookup",id:"dictionarylookup",children:[]},{value:"DictionaryExamples",id:"dictionaryexamples",children:[]},{value:"DocumentTranslator",id:"documenttranslator",children:[]}]}],y={toc:d};function g(e){var t=e.components,n=(0,s.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"translator"},"Translator"),(0,o.kt)("h3",{id:"translate"},"Translate"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["Hello, what is your name?", "Bye"],)\n], ["text",])\n\ntranslate = (Translate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setToLanguage(["zh-Hans", "fr"])\n            .setOutputCol("translation")\n            .setConcurrency(5))\n\ndisplay(translate\n      .transform(df)\n      .withColumn("translation", flatten(col("translation.translations")))\n      .withColumn("translation", col("translation.text"))\n      .select("translation"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?", "Bye")).toDF("text")\n\nval translate = (new Translate()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setTextCol("text")\n                  .setToLanguage(Seq("zh-Hans", "fr"))\n                  .setOutputCol("translation")\n                  .setConcurrency(5))\n\ndisplay(translate\n      .transform(df)\n      .withColumn("translation", flatten(col("translation.translations")))\n      .withColumn("translation", col("translation.text"))\n      .select("translation"))\n')))),(0,o.kt)(l.Z,{className:"Translate",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Translate",scala:"com/microsoft/azure/synapse/ml/cognitive/Translate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"transliterate"},"Transliterate"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089"],)\n], ["text",])\n\ntransliterate = (Transliterate()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setLanguage("ja")\n            .setFromScript("Jpan")\n            .setToScript("Latn")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(transliterate\n    .transform(df)\n    .withColumn("text", col("result.text"))\n    .withColumn("script", col("result.script"))\n    .select("text", "script"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("\u3053\u3093\u306b\u3061\u306f", "\u3055\u3088\u3046\u306a\u3089")).toDF("text")\n\nval transliterate = (new Transliterate()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setLanguage("ja")\n                        .setFromScript("Jpan")\n                        .setToScript("Latn")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(transliterate\n    .transform(df)\n    .withColumn("text", col("result.text"))\n    .withColumn("script", col("result.script"))\n    .select("text", "script"))\n')))),(0,o.kt)(l.Z,{className:"Transliterate",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Transliterate",scala:"com/microsoft/azure/synapse/ml/cognitive/Transliterate.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"detect"},"Detect"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\ndetect = (Detect()\n      .setSubscriptionKey(translatorKey)\n      .setLocation("eastus")\n      .setTextCol("text")\n      .setOutputCol("result"))\n\ndisplay(detect\n    .transform(df)\n    .withColumn("language", col("result.language"))\n    .select("language"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.col\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval detect = (new Detect()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(detect\n    .transform(df)\n    .withColumn("language", col("result.language"))\n    .select("language"))\n')))),(0,o.kt)(l.Z,{className:"Detect",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.Detect",scala:"com/microsoft/azure/synapse/ml/cognitive/Detect.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"breaksentence"},"BreakSentence"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf =  spark.createDataFrame([\n  (["Hello, what is your name?"],)\n], ["text",])\n\nbreakSentence = (BreakSentence()\n            .setSubscriptionKey(translatorKey)\n            .setLocation("eastus")\n            .setTextCol("text")\n            .setOutputCol("result"))\n\ndisplay(breakSentence\n    .transform(df)\n    .withColumn("sentLen", flatten(col("result.sentLen")))\n    .select("sentLen"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("Hello, what is your name?")).toDF("text")\n\nval breakSentence = (new BreakSentence()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(breakSentence\n    .transform(df)\n    .withColumn("sentLen", flatten(col("result.sentLen")))\n    .select("sentLen"))\n')))),(0,o.kt)(l.Z,{className:"BreakSentence",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.BreakSentence",scala:"com/microsoft/azure/synapse/ml/cognitive/BreakSentence.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"dictionarylookup"},"DictionaryLookup"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  (["fly"],)\n], ["text",])\n\ndictionaryLookup = (DictionaryLookup()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setTextCol("text")\n                  .setOutputCol("result"))\n\ndisplay(dictionaryLookup\n    .transform(df)\n    .withColumn("translations", flatten(col("result.translations")))\n    .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n    .select("normalizedTarget"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List("fly")).toDF("text")\n\nval dictionaryLookup = (new DictionaryLookup()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setFromLanguage("en")\n                        .setToLanguage("es")\n                        .setTextCol("text")\n                        .setOutputCol("result"))\n\ndisplay(dictionaryLookup\n      .transform(df)\n      .withColumn("translations", flatten(col("result.translations")))\n      .withColumn("normalizedTarget", col("translations.normalizedTarget"))\n      .select("normalizedTarget"))\n')))),(0,o.kt)(l.Z,{className:"DictionaryLookup",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DictionaryLookup",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryLookup.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"dictionaryexamples"},"DictionaryExamples"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ndf = spark.createDataFrame([\n  ([("fly", "volar")],)\n], ["textAndTranslation",])\n\ndictionaryExamples = (DictionaryExamples()\n                  .setSubscriptionKey(translatorKey)\n                  .setLocation("eastus")\n                  .setFromLanguage("en")\n                  .setToLanguage("es")\n                  .setOutputCol("result"))\n\ndisplay(dictionaryExamples\n    .transform(df)\n    .withColumn("examples", flatten(col("result.examples")))\n    .select("examples"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\nimport org.apache.spark.sql.functions.{col, flatten}\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval df = Seq(List(("fly", "volar"))).toDF("textAndTranslation")\n\nval dictionaryExamples = (new DictionaryExamples()\n                        .setSubscriptionKey(translatorKey)\n                        .setLocation("eastus")\n                        .setFromLanguage("en")\n                        .setToLanguage("es")\n                        .setOutputCol("result"))\n\ndisplay(dictionaryExamples\n    .transform(df)\n    .withColumn("examples", flatten(col("result.examples")))\n    .select("examples"))\n')))),(0,o.kt)(l.Z,{className:"DictionaryExamples",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DictionaryExamples",scala:"com/microsoft/azure/synapse/ml/cognitive/DictionaryExamples.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/TextTranslator.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"documenttranslator"},"DocumentTranslator"),(0,o.kt)(r.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ntranslatorKey = os.environ.get("TRANSLATOR_KEY", getSecret("translator-key"))\ntranslatorName = os.environ.get("TRANSLATOR_NAME", "mmlspark-translator")\n\ndocumentTranslator = (DocumentTranslator()\n                  .setSubscriptionKey(translatorKey)\n                  .setServiceName(translatorName)\n                  .setSourceUrlCol("sourceUrl")\n                  .setTargetsCol("targets")\n                  .setOutputCol("translationStatus"))\n'))),(0,o.kt)(i.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval translatorKey = sys.env.getOrElse("TRANSLATOR_KEY", None)\nval translatorName = sys.env.getOrElse("TRANSLATOR_NAME", None)\n\nval documentTranslator = (new DocumentTranslator()\n                        .setSubscriptionKey(translatorKey)\n                        .setServiceName(translatorName)\n                        .setSourceUrlCol("sourceUrl")\n                        .setTargetsCol("targets")\n                        .setOutputCol("translationStatus"))\n')))),(0,o.kt)(l.Z,{className:"DocumentTranslator",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DocumentTranslator",scala:"com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/DocumentTranslator.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},3931:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return v},contentTitle:function(){return f},metadata:function(){return k},toc:function(){return b},default:function(){return h}});var a=n(2122),s=n(9756),o=(n(7294),n(3905)),r=n(9308),i=n(4522),l=n(3440),c=n(8801),m=n(7616),u=n(2358),p=n(8364),d=n(4955),y=n(1983),g=["components"],v={title:"Transformers - Cognitive",sidebar_label:"Cognitive",hide_title:!0},f=void 0,k={unversionedId:"documentation/transformers/transformers_cognitive",id:"documentation/transformers/transformers_cognitive",isDocsHomePage:!1,title:"Transformers - Cognitive",description:"export const toc = [...TextAnalyticsTOC, ...TranslatorTOC, ...ComputerVisionTOC,",source:"@site/docs/documentation/transformers/transformers_cognitive.md",sourceDirName:"documentation/transformers",slug:"/documentation/transformers/transformers_cognitive",permalink:"/SynapseML/docs/next/documentation/transformers/transformers_cognitive",version:"current",frontMatter:{title:"Transformers - Cognitive",sidebar_label:"Cognitive",hide_title:!0},sidebar:"docs",previous:{title:"TextAnalytics - Amazon Book Reviews",permalink:"/SynapseML/docs/next/examples/text_analytics/TextAnalytics - Amazon Book Reviews"},next:{title:"Core",permalink:"/SynapseML/docs/next/documentation/transformers/transformers_core"}},b=[].concat(r.toc,i.toc,l.toc,c.toc,m.toc,u.toc,p.toc,d.toc,y.toc),T={toc:b};function h(e){var t=e.components,n=(0,s.Z)(e,g);return(0,o.kt)("wrapper",(0,a.Z)({},T,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.default,{mdxType:"TextAnalytics"}),(0,o.kt)(i.default,{mdxType:"Translator"}),(0,o.kt)(l.default,{mdxType:"ComputerVision"}),(0,o.kt)(c.default,{mdxType:"FormRecognizer"}),(0,o.kt)(m.default,{mdxType:"AnomalyDetection"}),(0,o.kt)(u.default,{mdxType:"Face"}),(0,o.kt)(p.default,{mdxType:"SpeechToText"}),(0,o.kt)(d.default,{mdxType:"AzureSearch"}),(0,o.kt)(y.default,{mdxType:"BingImageSearch"}))}h.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(s&&(s+=" "),s+=n);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,n=0,s="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(s&&(s+=" "),s+=t);return s}n.d(t,{Z:function(){return s}})}}]);