(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[929],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),p=c(n),d=r,f=p["".concat(i,".").concat(d)]||p[d]||u[d]||o;return n?a.createElement(f,s(s({ref:t},m),{},{components:n})):a.createElement(f,s({ref:t},m))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1332:function(e,t,n){"use strict";var a=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:n,className:r},t)}},5386:function(e,t,n){"use strict";n.d(t,{Z:function(){return u}});var a=n(7294),r=n(8578);var o=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},s=n(6010),l="tabItem_2kG2",i="tabItemActive_3NDg";var c=37,m=39;var u=function(e){var t=e.lazy,n=e.block,r=e.defaultValue,u=e.values,p=e.groupId,d=e.className,f=o(),b=f.tabGroupChoices,g=f.setTabGroupChoices,y=(0,a.useState)(r),v=y[0],C=y[1],h=a.Children.toArray(e.children),k=[];if(null!=p){var S=b[p];null!=S&&S!==v&&u.some((function(e){return e.value===S}))&&C(S)}var P=function(e){var t=e.currentTarget,n=k.indexOf(t),a=u[n].value;C(a),null!=p&&(g(p,a),setTimeout((function(){var e,n,a,r,o,s,l,c;(e=t.getBoundingClientRect(),n=e.top,a=e.left,r=e.bottom,o=e.right,s=window,l=s.innerHeight,c=s.innerWidth,n>=0&&o<=c&&r<=l&&a>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},L=function(e){var t,n;switch(e.keyCode){case m:var a=k.indexOf(e.target)+1;n=k[a]||k[0];break;case c:var r=k.indexOf(e.target)-1;n=k[r]||k[k.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":n},d)},u.map((function(e){var t=e.value,n=e.label;return a.createElement("li",{role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,className:(0,s.Z)("tabs__item",l,{"tabs__item--active":v===t}),key:t,ref:function(e){return k.push(e)},onKeyDown:L,onFocus:P,onClick:P},n)}))),t?(0,a.cloneElement)(h.filter((function(e){return e.props.value===v}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==v})}))))}},8578:function(e,t,n){"use strict";var a=(0,n(7294).createContext)(void 0);t.Z=a},1989:function(e,t,n){"use strict";var a=n(7294),r=n(2263);t.Z=function(e){var t=e.className,n=e.py,o=e.scala,s=e.sourceLink,l=(0,r.Z)().siteConfig.customFields.version,i="https://mmlspark.blob.core.windows.net/docs/"+l+"/pyspark/"+n,c="https://mmlspark.blob.core.windows.net/docs/"+l+"/scala/"+o;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:i},t)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:c},t)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:s},t)))))}},1673:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return p},toc:function(){return d},default:function(){return b}});var a=n(2122),r=n(9756),o=(n(7294),n(3905)),s=n(5386),l=n(1332),i=n(1989),c=["components"],m={},u=void 0,p={unversionedId:"documentation/transformers/core/_Train",id:"version-0.9.1/documentation/transformers/core/_Train",isDocsHomePage:!1,title:"_Train",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.1/documentation/transformers/core/_Train.md",sourceDirName:"documentation/transformers/core",slug:"/documentation/transformers/core/_Train",permalink:"/SynapseML/docs/documentation/transformers/core/_Train",version:"0.9.1",frontMatter:{}},d=[{value:"Train",id:"train",children:[{value:"ComputeModelStatistics",id:"computemodelstatistics",children:[]},{value:"ComputePerInstanceStatistics",id:"computeperinstancestatistics",children:[]}]}],f={toc:d};function b(e){var t=e.components,n=(0,r.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"train"},"Train"),(0,o.kt)("h3",{id:"computemodelstatistics"},"ComputeModelStatistics"),(0,o.kt)(s.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\nfrom numpy import random\n\ndf = spark.createDataFrame(\n      [(random.rand(), random.rand()) for _ in range(4096)], ["label", "prediction"]\n)\n\ncms = (ComputeModelStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("prediction")\n      .setEvaluationMetric("classification"))\n\ndisplay(cms.transform(df))\n'))),(0,o.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport scala.util.Random\n\nval rand = new Random(1337)\nval df = (Seq.fill(4096)(rand.nextDouble())\n      .zip(Seq.fill(4096)(rand.nextDouble()))\n      .toDF("label", "prediction"))\n\nval cms = (new ComputeModelStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("prediction")\n      .setEvaluationMetric("classification"))\n\ndisplay(cms.transform(df))\n')))),(0,o.kt)(i.Z,{className:"ComputeModelStatistics",py:"mmlspark.train.html#module-mmlspark.train.ComputeModelStatistics",scala:"com/microsoft/azure/synapse/ml/train/ComputeModelStatistics.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/ComputeModelStatistics.scala",mdxType:"DocTable"}),(0,o.kt)("h3",{id:"computeperinstancestatistics"},"ComputePerInstanceStatistics"),(0,o.kt)(s.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(l.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.train import *\nfrom pyspark.ml.classification import LogisticRegression\nfrom pyspark.ml.feature import FastVectorAssembler\n\nlogisticRegression = (LogisticRegression()\n      .setRegParam(0.3)\n      .setElasticNetParam(0.8)\n      .setMaxIter(10)\n      .setLabelCol("label")\n      .setPredictionCol("LogRegScoredLabelsCol")\n      .setRawPredictionCol("LogRegScoresCol")\n      .setProbabilityCol("LogRegProbCol")\n      .setFeaturesCol("features"))\n\ndataset = (spark.createDataFrame([\n    (0.0, 2, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 4, 0.78, 0.99, 2.0),\n    (3.0, 5, 0.12, 0.34, 3.0),\n    (0.0, 1, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0),\n    (0.0, 0, 0.50, 0.60, 0.0),\n    (1.0, 2, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0)],\n    ["label", "col1", "col2", "col3", "prediction"]))\n\nassembler = (FastVectorAssembler()\n      .setInputCols(["col1", "col2", "col3"])\n      .setOutputCol("features"))\nassembledDataset = assembler.transform(dataset)\nmodel = logisticRegression.fit(assembledDataset)\nscoredData = model.transform(assembledDataset)\n\ncps = (ComputePerInstanceStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("LogRegScoredLabelsCol")\n      .setScoresCol("LogRegScoresCol")\n      .setScoredProbabilitiesCol("LogRegProbCol")\n      .setEvaluationMetric("classification"))\n\ndisplay(cps.transform(scoredData))\n'))),(0,o.kt)(l.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.train._\nimport org.apache.spark.ml.classification.LogisticRegression\nimport org.apache.spark.ml.feature.FastVectorAssembler\n\nval logisticRegression = (new LogisticRegression()\n      .setRegParam(0.3)\n      .setElasticNetParam(0.8)\n      .setMaxIter(10)\n      .setLabelCol("label")\n      .setPredictionCol("LogRegScoredLabelsCol")\n      .setRawPredictionCol("LogRegScoresCol")\n      .setProbabilityCol("LogRegProbCol")\n      .setFeaturesCol("features"))\n\nval dataset = spark.createDataFrame(Seq(\n    (0.0, 2, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 4, 0.78, 0.99, 2.0),\n    (3.0, 5, 0.12, 0.34, 3.0),\n    (0.0, 1, 0.50, 0.60, 0.0),\n    (1.0, 3, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0),\n    (0.0, 0, 0.50, 0.60, 0.0),\n    (1.0, 2, 0.40, 0.50, 1.0),\n    (2.0, 3, 0.78, 0.99, 2.0),\n    (3.0, 4, 0.12, 0.34, 3.0)))\n    .toDF("label", "col1", "col2", "col3", "prediction")\n\nval assembler = (new FastVectorAssembler()\n      .setInputCols(Array("col1", "col2", "col3"))\n      .setOutputCol("features"))\nval assembledDataset = assembler.transform(dataset)\nval model = logisticRegression.fit(assembledDataset)\nval scoredData = model.transform(assembledDataset)\n\nval cps = (new ComputePerInstanceStatistics()\n      .setLabelCol("label")\n      .setScoredLabelsCol("LogRegScoredLabelsCol")\n      .setScoresCol("LogRegScoresCol")\n      .setScoredProbabilitiesCol("LogRegProbCol")\n      .setEvaluationMetric("classification"))\n\ndisplay(cps.transform(scoredData))\n')))),(0,o.kt)(i.Z,{className:"ComputePerInstanceStatistics",py:"mmlspark.train.html#module-mmlspark.train.ComputePerInstanceStatistics",scala:"com/microsoft/azure/synapse/ml/train/ComputePerInstanceStatistics.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/train/ComputePerInstanceStatistics.scala",mdxType:"DocTable"}))}b.isMDXComponent=!0},6010:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}function r(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}n.d(t,{Z:function(){return r}})}}]);