(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[6193],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return m},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},m=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(t),d=a,g=u["".concat(s,".").concat(d)]||u[d]||c[d]||o;return t?r.createElement(g,i(i({ref:n},m),{},{components:t})):r.createElement(g,i({ref:n},m))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9396:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=["components"],l={title:"DeepLearning - Flower Image Classification",hide_title:!0,status:"stable",name:"DeepLearning - Flower Image Classification"},s=void 0,p={unversionedId:"examples/deep_learning/DeepLearning - Flower Image Classification",id:"version-0.9.1/examples/deep_learning/DeepLearning - Flower Image Classification",isDocsHomePage:!1,title:"DeepLearning - Flower Image Classification",description:"Deep Learning - Flower Image Classification",source:"@site/versioned_docs/version-0.9.1/examples/deep_learning/DeepLearning - Flower Image Classification.md",sourceDirName:"examples/deep_learning",slug:"/examples/deep_learning/DeepLearning - Flower Image Classification",permalink:"/SynapseML/docs/examples/deep_learning/DeepLearning - Flower Image Classification",version:"0.9.1",frontMatter:{title:"DeepLearning - Flower Image Classification",hide_title:!0,status:"stable",name:"DeepLearning - Flower Image Classification"},sidebar:"version-0.9.1/docs",previous:{title:"DeepLearning - CIFAR10 Convolutional Network",permalink:"/SynapseML/docs/examples/deep_learning/DeepLearning - CIFAR10 Convolutional Network"},next:{title:"DeepLearning - Transfer Learning",permalink:"/SynapseML/docs/examples/deep_learning/DeepLearning - Transfer Learning"}},m=[{value:"Deep Learning - Flower Image Classification",id:"deep-learning---flower-image-classification",children:[{value:"How does it work?",id:"how-does-it-work",children:[]},{value:"Run the experiment",id:"run-the-experiment",children:[]},{value:"Plot confusion matrix.",id:"plot-confusion-matrix",children:[]}]}],c={toc:m};function u(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"deep-learning---flower-image-classification"},"Deep Learning - Flower Image Classification"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pyspark.ml import Transformer, Estimator, Pipeline\nfrom pyspark.ml.classification import LogisticRegression\nfrom synapse.ml.downloader import ModelDownloader\nimport os, sys, time\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'model = ModelDownloader(spark, "dbfs:/models/").downloadByName("ResNet50")\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Load the images\n# use flowers_and_labels.parquet on larger cluster in order to get better results\nimagesWithLabels = spark.read.parquet("wasbs://publicwasb@mmlspark.blob.core.windows.net/flowers_and_labels2.parquet") \\\n    .withColumnRenamed("bytes","image").sample(.1)\n\nimagesWithLabels.printSchema()\n')),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/p2KgdYL.jpg",alt:"Smiley face"})),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.opencv import ImageTransformer\nfrom synapse.ml.image import UnrollImage\nfrom synapse.ml.cntk import ImageFeaturizer\nfrom synapse.ml.stages import *\n\n# Make some featurizers\nit = ImageTransformer()\\\n    .setOutputCol("scaled")\\\n    .resize(size=(60, 60))\n\nur = UnrollImage()\\\n    .setInputCol("scaled")\\\n    .setOutputCol("features")\n    \ndc1 = DropColumns().setCols(["scaled", "image"])\n\nlr1 = LogisticRegression().setMaxIter(8).setFeaturesCol("features").setLabelCol("labels")\n\ndc2 = DropColumns().setCols(["features"])\n\nbasicModel = Pipeline(stages=[it, ur, dc1, lr1, dc2])\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'resnet = ImageFeaturizer()\\\n    .setInputCol("image")\\\n    .setOutputCol("features")\\\n    .setModelLocation(model.uri)\\\n    .setLayerNames(model.layerNames)\\\n    .setCutOutputLayers(1)\n    \ndc3 = DropColumns().setCols(["image"])\n    \nlr2 = LogisticRegression().setMaxIter(8).setFeaturesCol("features").setLabelCol("labels")\n\ndc4 = DropColumns().setCols(["features"])\n\ndeepModel = Pipeline(stages=[resnet, dc3, lr2, dc4])    \n')),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.imgur.com/Mb4Dyou.png",alt:"Resnet 18"})),(0,o.kt)("h3",{id:"how-does-it-work"},"How does it work?"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"http://i.stack.imgur.com/Hl2H6.png",alt:"Convolutional network weights"})),(0,o.kt)("h3",{id:"run-the-experiment"},"Run the experiment"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'def timedExperiment(model, train, test):\n  start = time.time()\n  result =  model.fit(train).transform(test).toPandas()\n  print("Experiment took {}s".format(time.time() - start))\n  return result\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"train, test = imagesWithLabels.randomSplit([.8,.2])\ntrain.count(), test.count()\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"basicResults = timedExperiment(basicModel, train, test)\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"deepResults = timedExperiment(deepModel, train, test)\n")),(0,o.kt)("h3",{id:"plot-confusion-matrix"},"Plot confusion matrix."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'import matplotlib.pyplot as plt\nfrom sklearn.metrics import confusion_matrix\nimport numpy as np\n\ndef evaluate(results, name):\n    y, y_hat = results["labels"],results["prediction"]\n    y = [int(l) for l in y]\n\n    accuracy = np.mean([1. if pred==true else 0. for (pred,true) in zip(y_hat,y)])\n    cm = confusion_matrix(y, y_hat)\n    cm = cm.astype("float") / cm.sum(axis=1)[:, np.newaxis]\n\n    plt.text(40, 10,"$Accuracy$ $=$ ${}\\%$".format(round(accuracy*100,1)),fontsize=14)\n    plt.imshow(cm, interpolation="nearest", cmap=plt.cm.Blues)\n    plt.colorbar()\n    plt.xlabel("$Predicted$ $label$", fontsize=18)\n    plt.ylabel("$True$ $Label$", fontsize=18)\n    plt.title("$Normalized$ $CM$ $for$ ${}$".format(name))\n\nplt.figure(figsize=(12,5))\nplt.subplot(1,2,1)\nevaluate(deepResults,"CNTKModel + LR")\nplt.subplot(1,2,2)\nevaluate(basicResults,"LR")\n# Note that on the larger dataset the accuracy will bump up from 44% to >90%\ndisplay(plt.show())\n')))}u.isMDXComponent=!0}}]);