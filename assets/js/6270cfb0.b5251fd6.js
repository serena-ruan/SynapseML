(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[1057],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return m},kt:function(){return p}});var n=a(7294);function s(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){s(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,s=function(e,t){if(null==e)return{};var a,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(s[a]=e[a]);return s}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(s[a]=e[a])}return s}var i=n.createContext({}),l=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},m=function(e){var t=l(e.components);return n.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,s=e.mdxType,r=e.originalType,i=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=l(a),p=s,f=d["".concat(i,".").concat(p)]||d[p]||u[p]||r;return a?n.createElement(f,c(c({ref:t},m),{},{components:a})):n.createElement(f,c({ref:t},m))}));function p(e,t){var a=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var r=a.length,c=new Array(r);c[0]=d;var o={};for(var i in t)hasOwnProperty.call(t,i)&&(o[i]=t[i]);o.originalType=e,o.mdxType="string"==typeof e?e:s,c[1]=o;for(var l=2;l<r;l++)c[l]=a[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1332:function(e,t,a){"use strict";var n=a(7294);t.Z=function(e){var t=e.children,a=e.hidden,s=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:s},t)}},5386:function(e,t,a){"use strict";a.d(t,{Z:function(){return u}});var n=a(7294),s=a(8578);var r=function(){var e=(0,n.useContext)(s.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},c=a(6010),o="tabItem_2kG2",i="tabItemActive_3NDg";var l=37,m=39;var u=function(e){var t=e.lazy,a=e.block,s=e.defaultValue,u=e.values,d=e.groupId,p=e.className,f=r(),g=f.tabGroupChoices,y=f.setTabGroupChoices,v=(0,n.useState)(s),I=v[0],b=v[1],F=n.Children.toArray(e.children),k=[];if(null!=d){var h=g[d];null!=h&&h!==I&&u.some((function(e){return e.value===h}))&&b(h)}var D=function(e){var t=e.currentTarget,a=k.indexOf(t),n=u[a].value;b(n),null!=d&&(y(d,n),setTimeout((function(){var e,a,n,s,r,c,o,l;(e=t.getBoundingClientRect(),a=e.top,n=e.left,s=e.bottom,r=e.right,c=window,o=c.innerHeight,l=c.innerWidth,a>=0&&r<=l&&s<=o&&n>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(i),setTimeout((function(){return t.classList.remove(i)}),2e3))}),150))},w=function(e){var t,a;switch(e.keyCode){case m:var n=k.indexOf(e.target)+1;a=k[n]||k[0];break;case l:var s=k.indexOf(e.target)-1;a=k[s]||k[k.length-1]}null==(t=a)||t.focus()};return n.createElement("div",{className:"tabs-container"},n.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":a},p)},u.map((function(e){var t=e.value,a=e.label;return n.createElement("li",{role:"tab",tabIndex:I===t?0:-1,"aria-selected":I===t,className:(0,c.Z)("tabs__item",o,{"tabs__item--active":I===t}),key:t,ref:function(e){return k.push(e)},onKeyDown:w,onFocus:D,onClick:D},a)}))),t?(0,n.cloneElement)(F.filter((function(e){return e.props.value===I}))[0],{className:"margin-vert--md"}):n.createElement("div",{className:"margin-vert--md"},F.map((function(e,t){return(0,n.cloneElement)(e,{key:t,hidden:e.props.value!==I})}))))}},8578:function(e,t,a){"use strict";var n=(0,a(7294).createContext)(void 0);t.Z=n},1989:function(e,t,a){"use strict";var n=a(7294),s=a(2263);t.Z=function(e){var t=e.className,a=e.py,r=e.scala,c=e.sourceLink,o=(0,s.Z)().siteConfig.customFields.version,i="https://mmlspark.blob.core.windows.net/docs/"+o+"/pyspark/"+a,l="https://mmlspark.blob.core.windows.net/docs/"+o+"/scala/"+r;return n.createElement("table",null,n.createElement("tbody",null,n.createElement("tr",null,n.createElement("td",null,n.createElement("strong",null,"Python API: "),n.createElement("a",{href:i},t)),n.createElement("td",null,n.createElement("strong",null,"Scala API: "),n.createElement("a",{href:l},t)),n.createElement("td",null,n.createElement("strong",null,"Source: "),n.createElement("a",{href:c},t)))))}},2358:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return m},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return p},default:function(){return g}});var n=a(2122),s=a(9756),r=(a(7294),a(3905)),c=a(5386),o=a(1332),i=a(1989),l=["components"],m={},u=void 0,d={unversionedId:"documentation/transformers/cognitive/_Face",id:"documentation/transformers/cognitive/_Face",isDocsHomePage:!1,title:"_Face",description:"\x3c!--",source:"@site/docs/documentation/transformers/cognitive/_Face.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_Face",permalink:"/SynapseML/docs/next/documentation/transformers/cognitive/_Face",version:"current",frontMatter:{}},p=[{value:"Face",id:"face",children:[{value:"DetectFace",id:"detectface",children:[]},{value:"FindSimilarFace",id:"findsimilarface",children:[]},{value:"GroupFaces",id:"groupfaces",children:[]},{value:"IdentifyFaces",id:"identifyfaces",children:[]},{value:"VerifyFaces",id:"verifyfaces",children:[]}]}],f={toc:p};function g(e){var t=e.components,a=(0,s.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},f,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"face"},"Face"),(0,r.kt)("h3",{id:"detectface"},"DetectFace"),(0,r.kt)(c.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n], ["url"])\n\nface = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes(["age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n      "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise"]))\n\ndisplay(face.transform(df))\n'))),(0,r.kt)(o.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg"\n  ).toDF("url")\n\nval face = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("face")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(true)\n    .setReturnFaceAttributes(Seq(\n      "age", "gender", "headPose", "smile", "facialHair", "glasses", "emotion",\n      "hair", "makeup", "occlusion", "accessories", "blur", "exposure", "noise")))\n\ndisplay(face.transform(df))\n')))),(0,r.kt)(i.Z,{className:"DetectFace",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.DetectFace",scala:"com/microsoft/azure/synapse/ml/cognitive/DetectFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"findsimilarface"},"FindSimilarFace"),(0,r.kt)(c.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\nfindSimilar = (FindSimilarFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("similar")\n    .setFaceIdCol("id")\n    .setFaceIds(faceIds))\n\ndisplay(findSimilar.transform(faceIdDF))\n'))),(0,r.kt)(o.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n    .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval findSimilar = (new FindSimilarFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("similar")\n    .setFaceIdCol("id")\n    .setFaceIds(faceIds))\n\ndisplay(findSimilar.transform(faceIdDF))\n')))),(0,r.kt)(i.Z,{className:"FindSimilarFace",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.FindSimilarFace",scala:"com/microsoft/azure/synapse/ml/cognitive/FindSimilarFace.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"groupfaces"},"GroupFaces"),(0,r.kt)(c.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\nfaceIds = [row.asDict()[\'id\'] for row in faceIdDF.collect()]\n\ngroup = (GroupFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("grouping")\n    .setFaceIds(faceIds))\n\ndisplay(group.transform(faceIdDF))\n'))),(0,r.kt)(o.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("id"))\n    .cache())\nval faceIds = faceIdDF.collect().map(row => row.getAs[String]("id"))\n\nval group = (new GroupFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("grouping")\n    .setFaceIds(faceIds))\n\ndisplay(group.transform(faceIdDF))\n')))),(0,r.kt)(i.Z,{className:"GroupFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.GroupFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/GroupFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"identifyfaces"},"IdentifyFaces"),(0,r.kt)(c.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\npgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nidentifyFaces = (IdentifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setFaceIdsCol("faces")\n    .setPersonGroupId(pgId)\n    .setOutputCol("identified_faces"))\n'))),(0,r.kt)(o.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval pgId = "PUT_YOUR_PERSON_GROUP_ID"\n\nval identifyFaces = (new IdentifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setFaceIdsCol("faces")\n    .setPersonGroupId(pgId)\n    .setOutputCol("identified_faces"))\n')))),(0,r.kt)(i.Z,{className:"IdentifyFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.IdentifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/IdentifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"verifyfaces"},"VerifyFaces"),(0,r.kt)(c.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\ncognitiveKey = os.environ.get("COGNITIVE_API_KEY", getSecret("cognitive-api-key"))\ndf = spark.createDataFrame([\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",),\n  ("https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg",)\n], ["url"])\n\ndetector = (DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(True)\n    .setReturnFaceLandmarks(False)\n    .setReturnFaceAttributes([]))\n\nfaceIdDF = detector.transform(df).select("detected_faces").select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\nfaceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1)[0].asDict()[\'faceId1\']))\n\nverify = (VerifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("same")\n    .setFaceId1Col("faceId1")\n    .setFaceId2Col("faceId2"))\n\ndisplay(verify.transform(faceIdDF2))\n'))),(0,r.kt)(o.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval cognitiveKey = sys.env.getOrElse("COGNITIVE_API_KEY", None)\nval df: DataFrame = Seq(\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test1.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test2.jpg",\n    "https://mmlspark.blob.core.windows.net/datasets/DSIR/test3.jpg"\n  ).toDF("url")\n\nval detector = (new DetectFace()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setImageUrlCol("url")\n    .setOutputCol("detected_faces")\n    .setReturnFaceId(true)\n    .setReturnFaceLandmarks(false)\n    .setReturnFaceAttributes(Seq()))\n\nval faceIdDF = (detector.transform(df)\n    .select(col("detected_faces").getItem(0).getItem("faceId").alias("faceId1"))\n    .cache())\nval faceIdDF2 = faceIdDF.withColumn("faceId2", lit(faceIdDF.take(1).head.getString(0)))\n\nval verify = (new VerifyFaces()\n    .setSubscriptionKey(cognitiveKey)\n    .setLocation("eastus")\n    .setOutputCol("same")\n    .setFaceId1Col("faceId1")\n    .setFaceId2Col("faceId2"))\n\ndisplay(verify.transform(faceIdDF2))\n')))),(0,r.kt)(i.Z,{className:"VerifyFaces",py:"mmlspark.cognitive.html#module-mmlspark.cognitive.VerifyFaces",scala:"com/microsoft/azure/synapse/ml/cognitive/VerifyFaces.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/Face.scala",mdxType:"DocTable"}))}g.isMDXComponent=!0},6010:function(e,t,a){"use strict";function n(e){var t,a,s="";if("string"==typeof e||"number"==typeof e)s+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(a=n(e[t]))&&(s&&(s+=" "),s+=a);else for(t in e)e[t]&&(s&&(s+=" "),s+=t);return s}function s(){for(var e,t,a=0,s="";a<arguments.length;)(e=arguments[a++])&&(t=n(e))&&(s&&(s+=" "),s+=t);return s}a.d(t,{Z:function(){return s}})}}]);