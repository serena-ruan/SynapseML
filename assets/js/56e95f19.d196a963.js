(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[1117],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return p}});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function m(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),l=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=l(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=m(e,["components","mdxType","originalType","parentName"]),d=l(t),p=o,v=d["".concat(s,".").concat(p)]||d[p]||u[p]||r;return t?a.createElement(v,i(i({ref:n},c),{},{components:t})):a.createElement(v,i({ref:n},c))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=d;var m={};for(var s in n)hasOwnProperty.call(n,s)&&(m[s]=n[s]);m.originalType=e,m.mdxType="string"==typeof e?e:o,i[1]=m;for(var l=2;l<r;l++)i[l]=t[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1332:function(e,n,t){"use strict";var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,o=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:o},n)}},5386:function(e,n,t){"use strict";t.d(n,{Z:function(){return u}});var a=t(7294),o=t(8578);var r=function(){var e=(0,a.useContext)(o.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=t(6010),m="tabItem_2kG2",s="tabItemActive_3NDg";var l=37,c=39;var u=function(e){var n=e.lazy,t=e.block,o=e.defaultValue,u=e.values,d=e.groupId,p=e.className,v=r(),f=v.tabGroupChoices,g=v.setTabGroupChoices,M=(0,a.useState)(o),y=M[0],k=M[1],I=a.Children.toArray(e.children),b=[];if(null!=d){var h=f[d];null!=h&&h!==y&&u.some((function(e){return e.value===h}))&&k(h)}var R=function(e){var n=e.currentTarget,t=b.indexOf(n),a=u[t].value;k(a),null!=d&&(g(d,a),setTimeout((function(){var e,t,a,o,r,i,m,l;(e=n.getBoundingClientRect(),t=e.top,a=e.left,o=e.bottom,r=e.right,i=window,m=i.innerHeight,l=i.innerWidth,t>=0&&r<=l&&o<=m&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(s),setTimeout((function(){return n.classList.remove(s)}),2e3))}),150))},D=function(e){var n,t;switch(e.keyCode){case c:var a=b.indexOf(e.target)+1;t=b[a]||b[0];break;case l:var o=b.indexOf(e.target)-1;t=b[o]||b[b.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},p)},u.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:y===n?0:-1,"aria-selected":y===n,className:(0,i.Z)("tabs__item",m,{"tabs__item--active":y===n}),key:n,ref:function(e){return b.push(e)},onKeyDown:D,onFocus:R,onClick:R},t)}))),n?(0,a.cloneElement)(I.filter((function(e){return e.props.value===y}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},I.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==y})}))))}},8578:function(e,n,t){"use strict";var a=(0,t(7294).createContext)(void 0);n.Z=a},1989:function(e,n,t){"use strict";var a=t(7294),o=t(2263);n.Z=function(e){var n=e.className,t=e.py,r=e.scala,i=e.sourceLink,m=(0,o.Z)().siteConfig.customFields.version,s="https://mmlspark.blob.core.windows.net/docs/"+m+"/pyspark/"+t,l="https://mmlspark.blob.core.windows.net/docs/"+m+"/scala/"+r;return a.createElement("table",null,a.createElement("tbody",null,a.createElement("tr",null,a.createElement("td",null,a.createElement("strong",null,"Python API: "),a.createElement("a",{href:s},n)),a.createElement("td",null,a.createElement("strong",null,"Scala API: "),a.createElement("a",{href:l},n)),a.createElement("td",null,a.createElement("strong",null,"Source: "),a.createElement("a",{href:i},n)))))}},1522:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return u},metadata:function(){return d},toc:function(){return p},default:function(){return f}});var a=t(2122),o=t(9756),r=(t(7294),t(3905)),i=t(5386),m=t(1332),s=t(1989),l=["components"],c={},u=void 0,d={unversionedId:"documentation/estimators/core/_Recommendation",id:"version-0.9.1/documentation/estimators/core/_Recommendation",isDocsHomePage:!1,title:"_Recommendation",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.1/documentation/estimators/core/_Recommendation.md",sourceDirName:"documentation/estimators/core",slug:"/documentation/estimators/core/_Recommendation",permalink:"/SynapseML/docs/documentation/estimators/core/_Recommendation",version:"0.9.1",frontMatter:{}},p=[{value:"Recommendation",id:"recommendation",children:[{value:"RecommendationIndexer, RankingEvaluator, RankingAdapter and RankingTrainValidationSplit",id:"recommendationindexer-rankingevaluator-rankingadapter-and-rankingtrainvalidationsplit",children:[]},{value:"SAR",id:"sar",children:[]}]}],v={toc:p};function f(e){var n=e.components,t=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},v,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"recommendation"},"Recommendation"),(0,r.kt)("h3",{id:"recommendationindexer-rankingevaluator-rankingadapter-and-rankingtrainvalidationsplit"},"RecommendationIndexer, RankingEvaluator, RankingAdapter and RankingTrainValidationSplit"),(0,r.kt)(i.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(m.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.recommendation import *\nfrom pyspark.ml.recommendation import ALS\nfrom pyspark.ml.tuning import *\n\nratings = (spark.createDataFrame([\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3)\n      ], ["customerIDOrg", "itemIDOrg", "rating"])\n    .dropDuplicates()\n    .cache())\n\nrecommendationIndexer = (RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\ntransformedDf = (recommendationIndexer.fit(ratings)\n    .transform(ratings).cache())\n\nals = (ALS()\n    .setNumUserBlocks(1)\n    .setNumItemBlocks(1)\n    .setUserCol("customerID")\n    .setItemCol("itemID")\n    .setRatingCol("rating")\n    .setSeed(0))\n\nevaluator = (RankingEvaluator()\n    .setK(3)\n    .setNItems(10))\n\nadapter = (RankingAdapter()\n    .setK(evaluator.getK())\n    .setRecommender(als))\n\ndisplay(adapter.fit(transformedDf).transform(transformedDf))\n\nparamGrid = (ParamGridBuilder()\n    .addGrid(als.regParam, [1.0])\n    .build())\n\ntvRecommendationSplit = (RankingTrainValidationSplit()\n      .setEstimator(als)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid)\n      .setTrainRatio(0.8)\n      .setUserCol(recommendationIndexer.getUserOutputCol())\n      .setItemCol(recommendationIndexer.getItemOutputCol())\n      .setRatingCol("rating"))\n\ndisplay(tvRecommendationSplit.fit(transformedDf).transform(transformedDf))\n'))),(0,r.kt)(m.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.recommendation._\nimport org.apache.spark.ml.recommendation.ALS\nimport org.apache.spark.ml.tuning._\nimport spark.implicits._\n\nval ratings = (Seq(\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3))\n    .toDF("customerIDOrg", "itemIDOrg", "rating")\n    .dropDuplicates()\n    .cache())\n\nval recommendationIndexer = (new RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nval transformedDf = (recommendationIndexer.fit(ratings)\n    .transform(ratings).cache())\n\nval als = (new ALS()\n    .setNumUserBlocks(1)\n    .setNumItemBlocks(1)\n    .setUserCol("customerID")\n    .setItemCol("itemID")\n    .setRatingCol("rating")\n    .setSeed(0))\n\nval evaluator = (new RankingEvaluator()\n    .setK(3)\n    .setNItems(10))\n\nval adapter = (new RankingAdapter()\n    .setK(evaluator.getK)\n    .setRecommender(als))\n\ndisplay(adapter.fit(transformedDf).transform(transformedDf))\n\nval paramGrid = (new ParamGridBuilder()\n    .addGrid(als.regParam, Array(1.0))\n    .build())\n\nval tvRecommendationSplit = (new RankingTrainValidationSplit()\n      .setEstimator(als)\n      .setEvaluator(evaluator)\n      .setEstimatorParamMaps(paramGrid)\n      .setTrainRatio(0.8)\n      .setUserCol(recommendationIndexer.getUserOutputCol)\n      .setItemCol(recommendationIndexer.getItemOutputCol)\n      .setRatingCol("rating"))\n\ndisplay(tvRecommendationSplit.fit(transformedDf).transform(transformedDf))\n')))),(0,r.kt)(s.Z,{className:"RecommendationIndexer",py:"mmlspark.recommendation.html#module-mmlspark.recommendation.RecommendationIndexer",scala:"com/microsoft/azure/synapse/ml/recommendation/RecommendationIndexer.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RecommendationIndexer.scala",mdxType:"DocTable"}),(0,r.kt)(s.Z,{className:"RankingEvaluator",py:"mmlspark.recommendation.html#module-mmlspark.recommendation.RankingEvaluator",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingEvaluator.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingEvaluator.scala",mdxType:"DocTable"}),(0,r.kt)(s.Z,{className:"RankingAdapter",py:"mmlspark.recommendation.html#module-mmlspark.recommendation.RankingAdapter",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingAdapter.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingAdapter.scala",mdxType:"DocTable"}),(0,r.kt)(s.Z,{className:"RankingTrainValidationSplit",py:"mmlspark.recommendation.html#module-mmlspark.recommendation.RankingTrainValidationSplit",scala:"com/microsoft/azure/synapse/ml/recommendation/RankingTrainValidationSplit.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/RankingTrainValidationSplit.scala",mdxType:"DocTable"}),(0,r.kt)("h3",{id:"sar"},"SAR"),(0,r.kt)(i.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,r.kt)(m.Z,{value:"py",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.recommendation import *\n\nratings = (spark.createDataFrame([\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3)\n      ], ["customerIDOrg", "itemIDOrg", "rating"])\n    .dropDuplicates()\n    .cache())\n\nrecommendationIndexer = (RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nalgo = (SAR()\n      .setUserCol("customerID")\n      .setItemCol("itemID")\n      .setRatingCol("rating")\n      .setTimeCol("timestamp")\n      .setSupportThreshold(1)\n      .setSimilarityFunction("jacccard")\n      .setActivityTimeFormat("EEE MMM dd HH:mm:ss Z yyyy"))\n\nadapter = (RankingAdapter()\n      .setK(5)\n      .setRecommender(algo))\n\nres1 = recommendationIndexer.fit(ratings).transform(ratings).cache()\n\ndisplay(adapter.fit(res1).transform(res1))\n'))),(0,r.kt)(m.Z,{value:"scala",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.recommendation._\nimport spark.implicits._\n\nval ratings = (Seq(\n      ("11", "Movie 01", 2),\n      ("11", "Movie 03", 1),\n      ("11", "Movie 04", 5),\n      ("11", "Movie 05", 3),\n      ("11", "Movie 06", 4),\n      ("11", "Movie 07", 1),\n      ("11", "Movie 08", 5),\n      ("11", "Movie 09", 3),\n      ("22", "Movie 01", 4),\n      ("22", "Movie 02", 5),\n      ("22", "Movie 03", 1),\n      ("22", "Movie 05", 3),\n      ("22", "Movie 06", 3),\n      ("22", "Movie 07", 5),\n      ("22", "Movie 08", 1),\n      ("22", "Movie 10", 3),\n      ("33", "Movie 01", 4),\n      ("33", "Movie 03", 1),\n      ("33", "Movie 04", 5),\n      ("33", "Movie 05", 3),\n      ("33", "Movie 06", 4),\n      ("33", "Movie 08", 1),\n      ("33", "Movie 09", 5),\n      ("33", "Movie 10", 3),\n      ("44", "Movie 01", 4),\n      ("44", "Movie 02", 5),\n      ("44", "Movie 03", 1),\n      ("44", "Movie 05", 3),\n      ("44", "Movie 06", 4),\n      ("44", "Movie 07", 5),\n      ("44", "Movie 08", 1),\n      ("44", "Movie 10", 3))\n    .toDF("customerIDOrg", "itemIDOrg", "rating")\n    .dropDuplicates()\n    .cache())\n\nval recommendationIndexer = (new RecommendationIndexer()\n    .setUserInputCol("customerIDOrg")\n    .setUserOutputCol("customerID")\n    .setItemInputCol("itemIDOrg")\n    .setItemOutputCol("itemID")\n    .setRatingCol("rating"))\n\nval algo = (new SAR()\n      .setUserCol("customerID")\n      .setItemCol("itemID")\n      .setRatingCol("rating")\n      .setTimeCol("timestamp")\n      .setSupportThreshold(1)\n      .setSimilarityFunction("jacccard")\n      .setActivityTimeFormat("EEE MMM dd HH:mm:ss Z yyyy"))\n\nval adapter = (new RankingAdapter()\n      .setK(5)\n      .setRecommender(algo))\n\nval res1 = recommendationIndexer.fit(ratings).transform(ratings).cache()\n\ndisplay(adapter.fit(res1).transform(res1))\n')))),(0,r.kt)(s.Z,{className:"SAR",py:"mmlspark.recommendation.html#module-mmlspark.recommendation.SAR",scala:"com/microsoft/azure/synapse/ml/recommendation/SAR.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/core/src/main/scala/com/microsoft/azure/synapse/ml/recommendation/SAR.scala",mdxType:"DocTable"}))}f.isMDXComponent=!0},6010:function(e,n,t){"use strict";function a(e){var n,t,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(o&&(o+=" "),o+=t);else for(n in e)e[n]&&(o&&(o+=" "),o+=n);return o}function o(){for(var e,n,t=0,o="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(o&&(o+=" "),o+=n);return o}t.d(n,{Z:function(){return o}})}}]);