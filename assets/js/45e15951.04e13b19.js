(self.webpackChunksynapseml=self.webpackChunksynapseml||[]).push([[1644],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(t),d=a,p=f["".concat(s,".").concat(d)]||f[d]||m[d]||o;return t?r.createElement(p,i(i({ref:n},u),{},{components:t})):r.createElement(p,i({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=f;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},1332:function(e,n,t){"use strict";var r=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:t,className:a},n)}},5386:function(e,n,t){"use strict";t.d(n,{Z:function(){return m}});var r=t(7294),a=t(8578);var o=function(){var e=(0,r.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},i=t(6010),c="tabItem_2kG2",s="tabItemActive_3NDg";var l=37,u=39;var m=function(e){var n=e.lazy,t=e.block,a=e.defaultValue,m=e.values,f=e.groupId,d=e.className,p=o(),v=p.tabGroupChoices,y=p.setTabGroupChoices,h=(0,r.useState)(a),b=h[0],g=h[1],S=r.Children.toArray(e.children),x=[];if(null!=f){var N=v[f];null!=N&&N!==b&&m.some((function(e){return e.value===N}))&&g(N)}var E=function(e){var n=e.currentTarget,t=x.indexOf(n),r=m[t].value;g(r),null!=f&&(y(f,r),setTimeout((function(){var e,t,r,a,o,i,c,l;(e=n.getBoundingClientRect(),t=e.top,r=e.left,a=e.bottom,o=e.right,i=window,c=i.innerHeight,l=i.innerWidth,t>=0&&o<=l&&a<=c&&r>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(s),setTimeout((function(){return n.classList.remove(s)}),2e3))}),150))},k=function(e){var n,t;switch(e.keyCode){case u:var r=x.indexOf(e.target)+1;t=x[r]||x[0];break;case l:var a=x.indexOf(e.target)-1;t=x[a]||x[x.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},d)},m.map((function(e){var n=e.value,t=e.label;return r.createElement("li",{role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,className:(0,i.Z)("tabs__item",c,{"tabs__item--active":b===n}),key:n,ref:function(e){return x.push(e)},onKeyDown:k,onFocus:E,onClick:E},t)}))),n?(0,r.cloneElement)(S.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},S.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}},8578:function(e,n,t){"use strict";var r=(0,t(7294).createContext)(void 0);n.Z=r},1989:function(e,n,t){"use strict";var r=t(7294),a=t(2263);n.Z=function(e){var n=e.className,t=e.py,o=e.scala,i=e.sourceLink,c=(0,a.Z)().siteConfig.customFields.version,s="https://mmlspark.blob.core.windows.net/docs/"+c+"/pyspark/"+t,l="https://mmlspark.blob.core.windows.net/docs/"+c+"/scala/"+o;return r.createElement("table",null,r.createElement("tbody",null,r.createElement("tr",null,r.createElement("td",null,r.createElement("strong",null,"Python API: "),r.createElement("a",{href:s},n)),r.createElement("td",null,r.createElement("strong",null,"Scala API: "),r.createElement("a",{href:l},n)),r.createElement("td",null,r.createElement("strong",null,"Source: "),r.createElement("a",{href:i},n)))))}},2877:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return u},contentTitle:function(){return m},metadata:function(){return f},toc:function(){return d},default:function(){return v}});var r=t(2122),a=t(9756),o=(t(7294),t(3905)),i=t(5386),c=t(1332),s=t(1989),l=["components"],u={},m=void 0,f={unversionedId:"documentation/transformers/cognitive/_AzureSearch",id:"version-0.9.1/documentation/transformers/cognitive/_AzureSearch",isDocsHomePage:!1,title:"_AzureSearch",description:"\x3c!--",source:"@site/versioned_docs/version-0.9.1/documentation/transformers/cognitive/_AzureSearch.md",sourceDirName:"documentation/transformers/cognitive",slug:"/documentation/transformers/cognitive/_AzureSearch",permalink:"/SynapseML/docs/documentation/transformers/cognitive/_AzureSearch",version:"0.9.1",frontMatter:{}},d=[{value:"Azure Search",id:"azure-search",children:[{value:"AzureSearch",id:"azuresearch",children:[]}]}],p={toc:d};function v(e){var n=e.components,t=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"azure-search"},"Azure Search"),(0,o.kt)("h3",{id:"azuresearch"},"AzureSearch"),(0,o.kt)(i.Z,{defaultValue:"py",values:[{label:"Python",value:"py"},{label:"Scala",value:"scala"}],mdxType:"Tabs"},(0,o.kt)(c.Z,{value:"py",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'from synapse.ml.cognitive import *\n\nazureSearchKey = os.environ.get("AZURE_SEARCH_KEY", getSecret("azure-search-key"))\ntestServiceName = "mmlspark-azure-search"\n\nindexName = "test-website"\n\ndef createSimpleIndexJson(indexName):\n    json_str = """\n       {\n           "name": "%s",\n           "fields": [\n               {\n                   "name": "id",\n                   "type": "Edm.String",\n                   "key": true,\n                   "facetable": false\n                },\n                {\n                    "name": "fileName",\n                    "type": "Edm.String",\n                    "searchable": false,\n                    "sortable": false,\n                    "facetable": false\n                },\n                {\n                    "name": "text",\n                    "type": "Edm.String",\n                    "filterable": false,\n                    "sortable": false,\n                    "facetable": false\n                }\n            ]\n        }\n    """\n\n    return json_str % indexName\n\ndf = (spark.createDataFrame([\n    ("upload", "0", "file0", "text0"),\n    ("upload", "1", "file1", "text1"),\n    ("upload", "2", "file2", "text2"),\n    ("upload", "3", "file3", "text3")\n], ["searchAction", "id", "fileName", "text"]))\n\nad = (AddDocuments()\n      .setSubscriptionKey(azureSearchKey)\n      .setServiceName(testServiceName)\n      .setOutputCol("out")\n      .setErrorCol("err")\n      .setIndexName(indexName)\n      .setActionCol("searchAction"))\n\ndisplay(ad.transform(df))\n\nAzureSearchWriter.writeToAzureSearch(df,\n    subscriptionKey=azureSearchKey,\n    actionCol="searchAction",\n    serviceName=testServiceName,\n    indexJson=createSimpleIndexJson(indexName))\n'))),(0,o.kt)(c.Z,{value:"scala",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-scala"},'import com.microsoft.azure.synapse.ml.cognitive._\nimport spark.implicits._\n\nval azureSearchKey = sys.env.getOrElse("AZURE_SEARCH_KEY", None)\nval testServiceName = "mmlspark-azure-search"\n\nval indexName = "test-website"\n\ndef createSimpleIndexJson(indexName: String) = {\n    s"""\n       |{\n       |    "name": "$indexName",\n       |    "fields": [\n       |      {\n       |        "name": "id",\n       |        "type": "Edm.String",\n       |        "key": true,\n       |        "facetable": false\n       |      },\n       |    {\n       |      "name": "fileName",\n       |      "type": "Edm.String",\n       |      "searchable": false,\n       |      "sortable": false,\n       |      "facetable": false\n       |    },\n       |    {\n       |      "name": "text",\n       |      "type": "Edm.String",\n       |      "filterable": false,\n       |      "sortable": false,\n       |      "facetable": false\n       |    }\n       |    ]\n       |  }\n    """.stripMargin\n}\n\nval df = ((0 until 4)\n      .map(i => ("upload", s"$i", s"file$i", s"text$i"))\n      .toDF("searchAction", "id", "fileName", "text"))\n\nval ad = (new AddDocuments()\n      .setSubscriptionKey(azureSearchKey)\n      .setServiceName(testServiceName)\n      .setOutputCol("out")\n      .setErrorCol("err")\n      .setIndexName(indexName)\n      .setActionCol("searchAction"))\n\ndisplay(ad.transform(df))\n\nAzureSearchWriter.write(df,\n      Map("subscriptionKey" -> azureSearchKey,\n        "actionCol" -> "searchAction",\n        "serviceName" -> testServiceName,\n        "indexJson" -> createSimpleIndexJson(indexName)))\n')))),(0,o.kt)(s.Z,{className:"AzureSearch",py:"synapse.ml.cognitive.html#module-synapse.ml.cognitive.AzureSearch",scala:"com/microsoft/azure/synapse/ml/cognitive/AzureSearch.html",sourceLink:"https://github.com/microsoft/SynapseML/blob/master/cognitive/src/main/scala/com/microsoft/azure/synapse/ml/cognitive/AzureSearch.scala",mdxType:"DocTable"}))}v.isMDXComponent=!0},6010:function(e,n,t){"use strict";function r(e){var n,t,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=r(e[n]))&&(a&&(a+=" "),a+=t);else for(n in e)e[n]&&(a&&(a+=" "),a+=n);return a}function a(){for(var e,n,t=0,a="";t<arguments.length;)(e=arguments[t++])&&(n=r(e))&&(a&&(a+=" "),a+=n);return a}t.d(n,{Z:function(){return a}})}}]);